/* soapC.cpp
   Generated by gSOAP 2.8.23 from happyservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.23 2017-05-27 13:59:17 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_happy__UpdateGroupUser:
		return soap_in_happy__UpdateGroupUser(soap, NULL, NULL, "happy:UpdateGroupUser");
	case SOAP_TYPE_happy__UpdateGroupUserResponse:
		return soap_in_happy__UpdateGroupUserResponse(soap, NULL, NULL, "happy:UpdateGroupUserResponse");
	case SOAP_TYPE_happy__InviteGroupRespond:
		return soap_in_happy__InviteGroupRespond(soap, NULL, NULL, "happy:InviteGroupRespond");
	case SOAP_TYPE_happy__InviteGroupRespondResponse:
		return soap_in_happy__InviteGroupRespondResponse(soap, NULL, NULL, "happy:InviteGroupRespondResponse");
	case SOAP_TYPE_happy__InviteGroup:
		return soap_in_happy__InviteGroup(soap, NULL, NULL, "happy:InviteGroup");
	case SOAP_TYPE_happy__InviteGroupResponse:
		return soap_in_happy__InviteGroupResponse(soap, NULL, NULL, "happy:InviteGroupResponse");
	case SOAP_TYPE_happy__UpdateHappy:
		return soap_in_happy__UpdateHappy(soap, NULL, NULL, "happy:UpdateHappy");
	case SOAP_TYPE_happy__UpdateHappyResponse:
		return soap_in_happy__UpdateHappyResponse(soap, NULL, NULL, "happy:UpdateHappyResponse");
	case SOAP_TYPE_happy__SendFileAccept:
		return soap_in_happy__SendFileAccept(soap, NULL, NULL, "happy:SendFileAccept");
	case SOAP_TYPE_happy__SendFileAcceptResponse:
		return soap_in_happy__SendFileAcceptResponse(soap, NULL, NULL, "happy:SendFileAcceptResponse");
	case SOAP_TYPE_happy__SendFileExec:
		return soap_in_happy__SendFileExec(soap, NULL, NULL, "happy:SendFileExec");
	case SOAP_TYPE_happy__SendFileExecResponse:
		return soap_in_happy__SendFileExecResponse(soap, NULL, NULL, "happy:SendFileExecResponse");
	case SOAP_TYPE_happy__ChatGroup:
		return soap_in_happy__ChatGroup(soap, NULL, NULL, "happy:ChatGroup");
	case SOAP_TYPE_happy__ChatGroupResponse:
		return soap_in_happy__ChatGroupResponse(soap, NULL, NULL, "happy:ChatGroupResponse");
	case SOAP_TYPE_happy__SetResource:
		return soap_in_happy__SetResource(soap, NULL, NULL, "happy:SetResource");
	case SOAP_TYPE_happy__SetResourceResponse:
		return soap_in_happy__SetResourceResponse(soap, NULL, NULL, "happy:SetResourceResponse");
	case SOAP_TYPE_happy__GetResource:
		return soap_in_happy__GetResource(soap, NULL, NULL, "happy:GetResource");
	case SOAP_TYPE_happy__GetResourceResponse:
		return soap_in_happy__GetResourceResponse(soap, NULL, NULL, "happy:GetResourceResponse");
	case SOAP_TYPE_happy__ChatShake:
		return soap_in_happy__ChatShake(soap, NULL, NULL, "happy:ChatShake");
	case SOAP_TYPE_happy__ChatShakeResponse:
		return soap_in_happy__ChatShakeResponse(soap, NULL, NULL, "happy:ChatShakeResponse");
	case SOAP_TYPE_happy__ChatOneByOne:
		return soap_in_happy__ChatOneByOne(soap, NULL, NULL, "happy:ChatOneByOne");
	case SOAP_TYPE_happy__ChatOneByOneResponse:
		return soap_in_happy__ChatOneByOneResponse(soap, NULL, NULL, "happy:ChatOneByOneResponse");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:UpdateGroupUser"))
		{	*type = SOAP_TYPE_happy__UpdateGroupUser;
			return soap_in_happy__UpdateGroupUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:UpdateGroupUserResponse"))
		{	*type = SOAP_TYPE_happy__UpdateGroupUserResponse;
			return soap_in_happy__UpdateGroupUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:InviteGroupRespond"))
		{	*type = SOAP_TYPE_happy__InviteGroupRespond;
			return soap_in_happy__InviteGroupRespond(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:InviteGroupRespondResponse"))
		{	*type = SOAP_TYPE_happy__InviteGroupRespondResponse;
			return soap_in_happy__InviteGroupRespondResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:InviteGroup"))
		{	*type = SOAP_TYPE_happy__InviteGroup;
			return soap_in_happy__InviteGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:InviteGroupResponse"))
		{	*type = SOAP_TYPE_happy__InviteGroupResponse;
			return soap_in_happy__InviteGroupResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:UpdateHappy"))
		{	*type = SOAP_TYPE_happy__UpdateHappy;
			return soap_in_happy__UpdateHappy(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:UpdateHappyResponse"))
		{	*type = SOAP_TYPE_happy__UpdateHappyResponse;
			return soap_in_happy__UpdateHappyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:SendFileAccept"))
		{	*type = SOAP_TYPE_happy__SendFileAccept;
			return soap_in_happy__SendFileAccept(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:SendFileAcceptResponse"))
		{	*type = SOAP_TYPE_happy__SendFileAcceptResponse;
			return soap_in_happy__SendFileAcceptResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:SendFileExec"))
		{	*type = SOAP_TYPE_happy__SendFileExec;
			return soap_in_happy__SendFileExec(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:SendFileExecResponse"))
		{	*type = SOAP_TYPE_happy__SendFileExecResponse;
			return soap_in_happy__SendFileExecResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:ChatGroup"))
		{	*type = SOAP_TYPE_happy__ChatGroup;
			return soap_in_happy__ChatGroup(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:ChatGroupResponse"))
		{	*type = SOAP_TYPE_happy__ChatGroupResponse;
			return soap_in_happy__ChatGroupResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:SetResource"))
		{	*type = SOAP_TYPE_happy__SetResource;
			return soap_in_happy__SetResource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:SetResourceResponse"))
		{	*type = SOAP_TYPE_happy__SetResourceResponse;
			return soap_in_happy__SetResourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:GetResource"))
		{	*type = SOAP_TYPE_happy__GetResource;
			return soap_in_happy__GetResource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:GetResourceResponse"))
		{	*type = SOAP_TYPE_happy__GetResourceResponse;
			return soap_in_happy__GetResourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:ChatShake"))
		{	*type = SOAP_TYPE_happy__ChatShake;
			return soap_in_happy__ChatShake(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:ChatShakeResponse"))
		{	*type = SOAP_TYPE_happy__ChatShakeResponse;
			return soap_in_happy__ChatShakeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:ChatOneByOne"))
		{	*type = SOAP_TYPE_happy__ChatOneByOne;
			return soap_in_happy__ChatOneByOne(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "happy:ChatOneByOneResponse"))
		{	*type = SOAP_TYPE_happy__ChatOneByOneResponse;
			return soap_in_happy__ChatOneByOneResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE_happy__UpdateGroupUser:
		return soap_out_happy__UpdateGroupUser(soap, tag, id, (const struct happy__UpdateGroupUser *)ptr, "happy:UpdateGroupUser");
	case SOAP_TYPE_happy__UpdateGroupUserResponse:
		return soap_out_happy__UpdateGroupUserResponse(soap, tag, id, (const struct happy__UpdateGroupUserResponse *)ptr, "happy:UpdateGroupUserResponse");
	case SOAP_TYPE_happy__InviteGroupRespond:
		return soap_out_happy__InviteGroupRespond(soap, tag, id, (const struct happy__InviteGroupRespond *)ptr, "happy:InviteGroupRespond");
	case SOAP_TYPE_happy__InviteGroupRespondResponse:
		return soap_out_happy__InviteGroupRespondResponse(soap, tag, id, (const struct happy__InviteGroupRespondResponse *)ptr, "happy:InviteGroupRespondResponse");
	case SOAP_TYPE_happy__InviteGroup:
		return soap_out_happy__InviteGroup(soap, tag, id, (const struct happy__InviteGroup *)ptr, "happy:InviteGroup");
	case SOAP_TYPE_happy__InviteGroupResponse:
		return soap_out_happy__InviteGroupResponse(soap, tag, id, (const struct happy__InviteGroupResponse *)ptr, "happy:InviteGroupResponse");
	case SOAP_TYPE_happy__UpdateHappy:
		return soap_out_happy__UpdateHappy(soap, tag, id, (const struct happy__UpdateHappy *)ptr, "happy:UpdateHappy");
	case SOAP_TYPE_happy__UpdateHappyResponse:
		return soap_out_happy__UpdateHappyResponse(soap, tag, id, (const struct happy__UpdateHappyResponse *)ptr, "happy:UpdateHappyResponse");
	case SOAP_TYPE_happy__SendFileAccept:
		return soap_out_happy__SendFileAccept(soap, tag, id, (const struct happy__SendFileAccept *)ptr, "happy:SendFileAccept");
	case SOAP_TYPE_happy__SendFileAcceptResponse:
		return soap_out_happy__SendFileAcceptResponse(soap, tag, id, (const struct happy__SendFileAcceptResponse *)ptr, "happy:SendFileAcceptResponse");
	case SOAP_TYPE_happy__SendFileExec:
		return soap_out_happy__SendFileExec(soap, tag, id, (const struct happy__SendFileExec *)ptr, "happy:SendFileExec");
	case SOAP_TYPE_happy__SendFileExecResponse:
		return soap_out_happy__SendFileExecResponse(soap, tag, id, (const struct happy__SendFileExecResponse *)ptr, "happy:SendFileExecResponse");
	case SOAP_TYPE_happy__ChatGroup:
		return soap_out_happy__ChatGroup(soap, tag, id, (const struct happy__ChatGroup *)ptr, "happy:ChatGroup");
	case SOAP_TYPE_happy__ChatGroupResponse:
		return soap_out_happy__ChatGroupResponse(soap, tag, id, (const struct happy__ChatGroupResponse *)ptr, "happy:ChatGroupResponse");
	case SOAP_TYPE_happy__SetResource:
		return soap_out_happy__SetResource(soap, tag, id, (const struct happy__SetResource *)ptr, "happy:SetResource");
	case SOAP_TYPE_happy__SetResourceResponse:
		return soap_out_happy__SetResourceResponse(soap, tag, id, (const struct happy__SetResourceResponse *)ptr, "happy:SetResourceResponse");
	case SOAP_TYPE_happy__GetResource:
		return soap_out_happy__GetResource(soap, tag, id, (const struct happy__GetResource *)ptr, "happy:GetResource");
	case SOAP_TYPE_happy__GetResourceResponse:
		return soap_out_happy__GetResourceResponse(soap, tag, id, (const struct happy__GetResourceResponse *)ptr, "happy:GetResourceResponse");
	case SOAP_TYPE_happy__ChatShake:
		return soap_out_happy__ChatShake(soap, tag, id, (const struct happy__ChatShake *)ptr, "happy:ChatShake");
	case SOAP_TYPE_happy__ChatShakeResponse:
		return soap_out_happy__ChatShakeResponse(soap, tag, id, (const struct happy__ChatShakeResponse *)ptr, "happy:ChatShakeResponse");
	case SOAP_TYPE_happy__ChatOneByOne:
		return soap_out_happy__ChatOneByOne(soap, tag, id, (const struct happy__ChatOneByOne *)ptr, "happy:ChatOneByOne");
	case SOAP_TYPE_happy__ChatOneByOneResponse:
		return soap_out_happy__ChatOneByOneResponse(soap, tag, id, (const struct happy__ChatOneByOneResponse *)ptr, "happy:ChatOneByOneResponse");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_happy__UpdateGroupUser:
		soap_serialize_happy__UpdateGroupUser(soap, (const struct happy__UpdateGroupUser *)ptr);
		break;
	case SOAP_TYPE_happy__UpdateGroupUserResponse:
		soap_serialize_happy__UpdateGroupUserResponse(soap, (const struct happy__UpdateGroupUserResponse *)ptr);
		break;
	case SOAP_TYPE_happy__InviteGroupRespond:
		soap_serialize_happy__InviteGroupRespond(soap, (const struct happy__InviteGroupRespond *)ptr);
		break;
	case SOAP_TYPE_happy__InviteGroupRespondResponse:
		soap_serialize_happy__InviteGroupRespondResponse(soap, (const struct happy__InviteGroupRespondResponse *)ptr);
		break;
	case SOAP_TYPE_happy__InviteGroup:
		soap_serialize_happy__InviteGroup(soap, (const struct happy__InviteGroup *)ptr);
		break;
	case SOAP_TYPE_happy__InviteGroupResponse:
		soap_serialize_happy__InviteGroupResponse(soap, (const struct happy__InviteGroupResponse *)ptr);
		break;
	case SOAP_TYPE_happy__UpdateHappy:
		soap_serialize_happy__UpdateHappy(soap, (const struct happy__UpdateHappy *)ptr);
		break;
	case SOAP_TYPE_happy__UpdateHappyResponse:
		soap_serialize_happy__UpdateHappyResponse(soap, (const struct happy__UpdateHappyResponse *)ptr);
		break;
	case SOAP_TYPE_happy__SendFileAccept:
		soap_serialize_happy__SendFileAccept(soap, (const struct happy__SendFileAccept *)ptr);
		break;
	case SOAP_TYPE_happy__SendFileAcceptResponse:
		soap_serialize_happy__SendFileAcceptResponse(soap, (const struct happy__SendFileAcceptResponse *)ptr);
		break;
	case SOAP_TYPE_happy__SendFileExec:
		soap_serialize_happy__SendFileExec(soap, (const struct happy__SendFileExec *)ptr);
		break;
	case SOAP_TYPE_happy__SendFileExecResponse:
		soap_serialize_happy__SendFileExecResponse(soap, (const struct happy__SendFileExecResponse *)ptr);
		break;
	case SOAP_TYPE_happy__ChatGroup:
		soap_serialize_happy__ChatGroup(soap, (const struct happy__ChatGroup *)ptr);
		break;
	case SOAP_TYPE_happy__ChatGroupResponse:
		soap_serialize_happy__ChatGroupResponse(soap, (const struct happy__ChatGroupResponse *)ptr);
		break;
	case SOAP_TYPE_happy__SetResource:
		soap_serialize_happy__SetResource(soap, (const struct happy__SetResource *)ptr);
		break;
	case SOAP_TYPE_happy__SetResourceResponse:
		soap_serialize_happy__SetResourceResponse(soap, (const struct happy__SetResourceResponse *)ptr);
		break;
	case SOAP_TYPE_happy__GetResource:
		soap_serialize_happy__GetResource(soap, (const struct happy__GetResource *)ptr);
		break;
	case SOAP_TYPE_happy__GetResourceResponse:
		soap_serialize_happy__GetResourceResponse(soap, (const struct happy__GetResourceResponse *)ptr);
		break;
	case SOAP_TYPE_happy__ChatShake:
		soap_serialize_happy__ChatShake(soap, (const struct happy__ChatShake *)ptr);
		break;
	case SOAP_TYPE_happy__ChatShakeResponse:
		soap_serialize_happy__ChatShakeResponse(soap, (const struct happy__ChatShakeResponse *)ptr);
		break;
	case SOAP_TYPE_happy__ChatOneByOne:
		soap_serialize_happy__ChatOneByOne(soap, (const struct happy__ChatOneByOne *)ptr);
		break;
	case SOAP_TYPE_happy__ChatOneByOneResponse:
		soap_serialize_happy__ChatOneByOneResponse(soap, (const struct happy__ChatOneByOneResponse *)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__ChatOneByOneResponse:
		return (void*)soap_instantiate_happy__ChatOneByOneResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__ChatOneByOne:
		return (void*)soap_instantiate_happy__ChatOneByOne(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__ChatShakeResponse:
		return (void*)soap_instantiate_happy__ChatShakeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__ChatShake:
		return (void*)soap_instantiate_happy__ChatShake(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__GetResourceResponse:
		return (void*)soap_instantiate_happy__GetResourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__GetResource:
		return (void*)soap_instantiate_happy__GetResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__SetResourceResponse:
		return (void*)soap_instantiate_happy__SetResourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__SetResource:
		return (void*)soap_instantiate_happy__SetResource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__ChatGroupResponse:
		return (void*)soap_instantiate_happy__ChatGroupResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__ChatGroup:
		return (void*)soap_instantiate_happy__ChatGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__SendFileExecResponse:
		return (void*)soap_instantiate_happy__SendFileExecResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__SendFileExec:
		return (void*)soap_instantiate_happy__SendFileExec(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__SendFileAcceptResponse:
		return (void*)soap_instantiate_happy__SendFileAcceptResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__SendFileAccept:
		return (void*)soap_instantiate_happy__SendFileAccept(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__UpdateHappyResponse:
		return (void*)soap_instantiate_happy__UpdateHappyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__UpdateHappy:
		return (void*)soap_instantiate_happy__UpdateHappy(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__InviteGroupResponse:
		return (void*)soap_instantiate_happy__InviteGroupResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__InviteGroup:
		return (void*)soap_instantiate_happy__InviteGroup(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__InviteGroupRespondResponse:
		return (void*)soap_instantiate_happy__InviteGroupRespondResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__InviteGroupRespond:
		return (void*)soap_instantiate_happy__InviteGroupRespond(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__UpdateGroupUserResponse:
		return (void*)soap_instantiate_happy__UpdateGroupUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_happy__UpdateGroupUser:
		return (void*)soap_instantiate_happy__UpdateGroupUser(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE(static_cast<std::wstring*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<std::wstring*>(p->ptr));
		break;
	case SOAP_TYPE_happy__ChatOneByOneResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__ChatOneByOneResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__ChatOneByOneResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__ChatOneByOne:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__ChatOneByOne*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__ChatOneByOne*>(p->ptr));
		break;
	case SOAP_TYPE_happy__ChatShakeResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__ChatShakeResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__ChatShakeResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__ChatShake:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__ChatShake*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__ChatShake*>(p->ptr));
		break;
	case SOAP_TYPE_happy__GetResourceResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__GetResourceResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__GetResourceResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__GetResource:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__GetResource*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__GetResource*>(p->ptr));
		break;
	case SOAP_TYPE_happy__SetResourceResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__SetResourceResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__SetResourceResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__SetResource:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__SetResource*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__SetResource*>(p->ptr));
		break;
	case SOAP_TYPE_happy__ChatGroupResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__ChatGroupResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__ChatGroupResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__ChatGroup:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__ChatGroup*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__ChatGroup*>(p->ptr));
		break;
	case SOAP_TYPE_happy__SendFileExecResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__SendFileExecResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__SendFileExecResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__SendFileExec:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__SendFileExec*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__SendFileExec*>(p->ptr));
		break;
	case SOAP_TYPE_happy__SendFileAcceptResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__SendFileAcceptResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__SendFileAcceptResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__SendFileAccept:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__SendFileAccept*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__SendFileAccept*>(p->ptr));
		break;
	case SOAP_TYPE_happy__UpdateHappyResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__UpdateHappyResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__UpdateHappyResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__UpdateHappy:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__UpdateHappy*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__UpdateHappy*>(p->ptr));
		break;
	case SOAP_TYPE_happy__InviteGroupResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__InviteGroupResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__InviteGroupResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__InviteGroup:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__InviteGroup*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__InviteGroup*>(p->ptr));
		break;
	case SOAP_TYPE_happy__InviteGroupRespondResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__InviteGroupRespondResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__InviteGroupRespondResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__InviteGroupRespond:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__InviteGroupRespond*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__InviteGroupRespond*>(p->ptr));
		break;
	case SOAP_TYPE_happy__UpdateGroupUserResponse:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__UpdateGroupUserResponse*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__UpdateGroupUserResponse*>(p->ptr));
		break;
	case SOAP_TYPE_happy__UpdateGroupUser:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct happy__UpdateGroupUser*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct happy__UpdateGroupUser*>(p->ptr));
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Header*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Code*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Detail*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Reason*>(p->ptr));
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		else
			SOAP_DELETE_ARRAY(static_cast<struct SOAP_ENV__Fault*>(p->ptr));
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_wstring_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_std__wstring, 0, sizeof(std::wstring), 0, soap_copy_std__wstring);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_std__wstring);
	if (soap_out_std__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__wstring, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(std::wstring);
		if (size)
			*size = sizeof(std::wstring);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(std::wstring, n);
		if (size)
			*size = n * sizeof(std::wstring);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::wstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::wstring %p -> %p\n", q, p));
	*(std::wstring*)p = *(std::wstring*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateGroupUser(struct soap *soap, struct happy__UpdateGroupUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->gkey);
	soap_default_std__wstring(soap, &a->newusers);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateGroupUser(struct soap *soap, const struct happy__UpdateGroupUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->gkey, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->gkey);
	soap_embedded(soap, &a->newusers, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->newusers);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateGroupUser(struct soap *soap, const char *tag, int id, const struct happy__UpdateGroupUser *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__UpdateGroupUser), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "gkey", -1, &a->gkey, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "newusers", -1, &a->newusers, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__UpdateGroupUser * SOAP_FMAC4 soap_in_happy__UpdateGroupUser(struct soap *soap, const char *tag, struct happy__UpdateGroupUser *a, const char *type)
{
	size_t soap_flag_gkey = 1;
	size_t soap_flag_newusers = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__UpdateGroupUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__UpdateGroupUser, sizeof(struct happy__UpdateGroupUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__UpdateGroupUser(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gkey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "gkey", &a->gkey, "xsd:string"))
				{	soap_flag_gkey--;
					continue;
				}
			if (soap_flag_newusers && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "newusers", &a->newusers, "xsd:string"))
				{	soap_flag_newusers--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__UpdateGroupUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__UpdateGroupUser, 0, sizeof(struct happy__UpdateGroupUser), 0, soap_copy_happy__UpdateGroupUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_gkey > 0 || soap_flag_newusers > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateGroupUser(struct soap *soap, const struct happy__UpdateGroupUser *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__UpdateGroupUser);
	if (soap_out_happy__UpdateGroupUser(soap, tag?tag:"happy:UpdateGroupUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__UpdateGroupUser * SOAP_FMAC4 soap_get_happy__UpdateGroupUser(struct soap *soap, struct happy__UpdateGroupUser *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__UpdateGroupUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__UpdateGroupUser * SOAP_FMAC2 soap_instantiate_happy__UpdateGroupUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__UpdateGroupUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__UpdateGroupUser, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__UpdateGroupUser);
		if (size)
			*size = sizeof(struct happy__UpdateGroupUser);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__UpdateGroupUser, n);
		if (size)
			*size = n * sizeof(struct happy__UpdateGroupUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__UpdateGroupUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateGroupUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__UpdateGroupUser %p -> %p\n", q, p));
	*(struct happy__UpdateGroupUser*)p = *(struct happy__UpdateGroupUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateGroupUserResponse(struct soap *soap, struct happy__UpdateGroupUserResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateGroupUserResponse(struct soap *soap, const struct happy__UpdateGroupUserResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateGroupUserResponse(struct soap *soap, const char *tag, int id, const struct happy__UpdateGroupUserResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__UpdateGroupUserResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__UpdateGroupUserResponse * SOAP_FMAC4 soap_in_happy__UpdateGroupUserResponse(struct soap *soap, const char *tag, struct happy__UpdateGroupUserResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__UpdateGroupUserResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__UpdateGroupUserResponse, sizeof(struct happy__UpdateGroupUserResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__UpdateGroupUserResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__UpdateGroupUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__UpdateGroupUserResponse, 0, sizeof(struct happy__UpdateGroupUserResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateGroupUserResponse(struct soap *soap, const struct happy__UpdateGroupUserResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__UpdateGroupUserResponse);
	if (soap_out_happy__UpdateGroupUserResponse(soap, tag?tag:"happy:UpdateGroupUserResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__UpdateGroupUserResponse * SOAP_FMAC4 soap_get_happy__UpdateGroupUserResponse(struct soap *soap, struct happy__UpdateGroupUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__UpdateGroupUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__UpdateGroupUserResponse * SOAP_FMAC2 soap_instantiate_happy__UpdateGroupUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__UpdateGroupUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__UpdateGroupUserResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__UpdateGroupUserResponse);
		if (size)
			*size = sizeof(struct happy__UpdateGroupUserResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__UpdateGroupUserResponse, n);
		if (size)
			*size = n * sizeof(struct happy__UpdateGroupUserResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__UpdateGroupUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateGroupUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__UpdateGroupUserResponse %p -> %p\n", q, p));
	*(struct happy__UpdateGroupUserResponse*)p = *(struct happy__UpdateGroupUserResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroupRespond(struct soap *soap, struct happy__InviteGroupRespond *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->gkey);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroupRespond(struct soap *soap, const struct happy__InviteGroupRespond *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->gkey, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->gkey);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroupRespond(struct soap *soap, const char *tag, int id, const struct happy__InviteGroupRespond *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__InviteGroupRespond), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "gkey", -1, &a->gkey, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__InviteGroupRespond * SOAP_FMAC4 soap_in_happy__InviteGroupRespond(struct soap *soap, const char *tag, struct happy__InviteGroupRespond *a, const char *type)
{
	size_t soap_flag_key = 1;
	size_t soap_flag_gkey = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__InviteGroupRespond *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__InviteGroupRespond, sizeof(struct happy__InviteGroupRespond), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__InviteGroupRespond(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_gkey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "gkey", &a->gkey, "xsd:string"))
				{	soap_flag_gkey--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__InviteGroupRespond *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__InviteGroupRespond, 0, sizeof(struct happy__InviteGroupRespond), 0, soap_copy_happy__InviteGroupRespond);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_gkey > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroupRespond(struct soap *soap, const struct happy__InviteGroupRespond *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__InviteGroupRespond);
	if (soap_out_happy__InviteGroupRespond(soap, tag?tag:"happy:InviteGroupRespond", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__InviteGroupRespond * SOAP_FMAC4 soap_get_happy__InviteGroupRespond(struct soap *soap, struct happy__InviteGroupRespond *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__InviteGroupRespond(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__InviteGroupRespond * SOAP_FMAC2 soap_instantiate_happy__InviteGroupRespond(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__InviteGroupRespond(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__InviteGroupRespond, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__InviteGroupRespond);
		if (size)
			*size = sizeof(struct happy__InviteGroupRespond);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__InviteGroupRespond, n);
		if (size)
			*size = n * sizeof(struct happy__InviteGroupRespond);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__InviteGroupRespond*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroupRespond(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__InviteGroupRespond %p -> %p\n", q, p));
	*(struct happy__InviteGroupRespond*)p = *(struct happy__InviteGroupRespond*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroupRespondResponse(struct soap *soap, struct happy__InviteGroupRespondResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroupRespondResponse(struct soap *soap, const struct happy__InviteGroupRespondResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroupRespondResponse(struct soap *soap, const char *tag, int id, const struct happy__InviteGroupRespondResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__InviteGroupRespondResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__InviteGroupRespondResponse * SOAP_FMAC4 soap_in_happy__InviteGroupRespondResponse(struct soap *soap, const char *tag, struct happy__InviteGroupRespondResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__InviteGroupRespondResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__InviteGroupRespondResponse, sizeof(struct happy__InviteGroupRespondResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__InviteGroupRespondResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__InviteGroupRespondResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__InviteGroupRespondResponse, 0, sizeof(struct happy__InviteGroupRespondResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroupRespondResponse(struct soap *soap, const struct happy__InviteGroupRespondResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__InviteGroupRespondResponse);
	if (soap_out_happy__InviteGroupRespondResponse(soap, tag?tag:"happy:InviteGroupRespondResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__InviteGroupRespondResponse * SOAP_FMAC4 soap_get_happy__InviteGroupRespondResponse(struct soap *soap, struct happy__InviteGroupRespondResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__InviteGroupRespondResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__InviteGroupRespondResponse * SOAP_FMAC2 soap_instantiate_happy__InviteGroupRespondResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__InviteGroupRespondResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__InviteGroupRespondResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__InviteGroupRespondResponse);
		if (size)
			*size = sizeof(struct happy__InviteGroupRespondResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__InviteGroupRespondResponse, n);
		if (size)
			*size = n * sizeof(struct happy__InviteGroupRespondResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__InviteGroupRespondResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroupRespondResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__InviteGroupRespondResponse %p -> %p\n", q, p));
	*(struct happy__InviteGroupRespondResponse*)p = *(struct happy__InviteGroupRespondResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroup(struct soap *soap, struct happy__InviteGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->builder);
	soap_default_std__wstring(soap, &a->title);
	soap_default_std__wstring(soap, &a->gkey);
	soap_default_std__wstring(soap, &a->members);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroup(struct soap *soap, const struct happy__InviteGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->builder, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->builder);
	soap_embedded(soap, &a->title, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->title);
	soap_embedded(soap, &a->gkey, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->gkey);
	soap_embedded(soap, &a->members, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->members);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroup(struct soap *soap, const char *tag, int id, const struct happy__InviteGroup *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__InviteGroup), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "builder", -1, &a->builder, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "title", -1, &a->title, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "gkey", -1, &a->gkey, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "members", -1, &a->members, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__InviteGroup * SOAP_FMAC4 soap_in_happy__InviteGroup(struct soap *soap, const char *tag, struct happy__InviteGroup *a, const char *type)
{
	size_t soap_flag_builder = 1;
	size_t soap_flag_title = 1;
	size_t soap_flag_gkey = 1;
	size_t soap_flag_members = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__InviteGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__InviteGroup, sizeof(struct happy__InviteGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__InviteGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_builder && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "builder", &a->builder, "xsd:string"))
				{	soap_flag_builder--;
					continue;
				}
			if (soap_flag_title && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "title", &a->title, "xsd:string"))
				{	soap_flag_title--;
					continue;
				}
			if (soap_flag_gkey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "gkey", &a->gkey, "xsd:string"))
				{	soap_flag_gkey--;
					continue;
				}
			if (soap_flag_members && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "members", &a->members, "xsd:string"))
				{	soap_flag_members--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__InviteGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__InviteGroup, 0, sizeof(struct happy__InviteGroup), 0, soap_copy_happy__InviteGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_builder > 0 || soap_flag_title > 0 || soap_flag_gkey > 0 || soap_flag_members > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroup(struct soap *soap, const struct happy__InviteGroup *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__InviteGroup);
	if (soap_out_happy__InviteGroup(soap, tag?tag:"happy:InviteGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__InviteGroup * SOAP_FMAC4 soap_get_happy__InviteGroup(struct soap *soap, struct happy__InviteGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__InviteGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__InviteGroup * SOAP_FMAC2 soap_instantiate_happy__InviteGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__InviteGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__InviteGroup, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__InviteGroup);
		if (size)
			*size = sizeof(struct happy__InviteGroup);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__InviteGroup, n);
		if (size)
			*size = n * sizeof(struct happy__InviteGroup);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__InviteGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__InviteGroup %p -> %p\n", q, p));
	*(struct happy__InviteGroup*)p = *(struct happy__InviteGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroupResponse(struct soap *soap, struct happy__InviteGroupResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroupResponse(struct soap *soap, const struct happy__InviteGroupResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroupResponse(struct soap *soap, const char *tag, int id, const struct happy__InviteGroupResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__InviteGroupResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__InviteGroupResponse * SOAP_FMAC4 soap_in_happy__InviteGroupResponse(struct soap *soap, const char *tag, struct happy__InviteGroupResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__InviteGroupResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__InviteGroupResponse, sizeof(struct happy__InviteGroupResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__InviteGroupResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__InviteGroupResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__InviteGroupResponse, 0, sizeof(struct happy__InviteGroupResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroupResponse(struct soap *soap, const struct happy__InviteGroupResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__InviteGroupResponse);
	if (soap_out_happy__InviteGroupResponse(soap, tag?tag:"happy:InviteGroupResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__InviteGroupResponse * SOAP_FMAC4 soap_get_happy__InviteGroupResponse(struct soap *soap, struct happy__InviteGroupResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__InviteGroupResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__InviteGroupResponse * SOAP_FMAC2 soap_instantiate_happy__InviteGroupResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__InviteGroupResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__InviteGroupResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__InviteGroupResponse);
		if (size)
			*size = sizeof(struct happy__InviteGroupResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__InviteGroupResponse, n);
		if (size)
			*size = n * sizeof(struct happy__InviteGroupResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__InviteGroupResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroupResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__InviteGroupResponse %p -> %p\n", q, p));
	*(struct happy__InviteGroupResponse*)p = *(struct happy__InviteGroupResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateHappy(struct soap *soap, struct happy__UpdateHappy *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateHappy(struct soap *soap, const struct happy__UpdateHappy *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateHappy(struct soap *soap, const char *tag, int id, const struct happy__UpdateHappy *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__UpdateHappy), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__UpdateHappy * SOAP_FMAC4 soap_in_happy__UpdateHappy(struct soap *soap, const char *tag, struct happy__UpdateHappy *a, const char *type)
{
	size_t soap_flag_key = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__UpdateHappy *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__UpdateHappy, sizeof(struct happy__UpdateHappy), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__UpdateHappy(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__UpdateHappy *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__UpdateHappy, 0, sizeof(struct happy__UpdateHappy), 0, soap_copy_happy__UpdateHappy);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateHappy(struct soap *soap, const struct happy__UpdateHappy *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__UpdateHappy);
	if (soap_out_happy__UpdateHappy(soap, tag?tag:"happy:UpdateHappy", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__UpdateHappy * SOAP_FMAC4 soap_get_happy__UpdateHappy(struct soap *soap, struct happy__UpdateHappy *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__UpdateHappy(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__UpdateHappy * SOAP_FMAC2 soap_instantiate_happy__UpdateHappy(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__UpdateHappy(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__UpdateHappy, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__UpdateHappy);
		if (size)
			*size = sizeof(struct happy__UpdateHappy);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__UpdateHappy, n);
		if (size)
			*size = n * sizeof(struct happy__UpdateHappy);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__UpdateHappy*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateHappy(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__UpdateHappy %p -> %p\n", q, p));
	*(struct happy__UpdateHappy*)p = *(struct happy__UpdateHappy*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateHappyResponse(struct soap *soap, struct happy__UpdateHappyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateHappyResponse(struct soap *soap, const struct happy__UpdateHappyResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateHappyResponse(struct soap *soap, const char *tag, int id, const struct happy__UpdateHappyResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__UpdateHappyResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__UpdateHappyResponse * SOAP_FMAC4 soap_in_happy__UpdateHappyResponse(struct soap *soap, const char *tag, struct happy__UpdateHappyResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__UpdateHappyResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__UpdateHappyResponse, sizeof(struct happy__UpdateHappyResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__UpdateHappyResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__UpdateHappyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__UpdateHappyResponse, 0, sizeof(struct happy__UpdateHappyResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateHappyResponse(struct soap *soap, const struct happy__UpdateHappyResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__UpdateHappyResponse);
	if (soap_out_happy__UpdateHappyResponse(soap, tag?tag:"happy:UpdateHappyResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__UpdateHappyResponse * SOAP_FMAC4 soap_get_happy__UpdateHappyResponse(struct soap *soap, struct happy__UpdateHappyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__UpdateHappyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__UpdateHappyResponse * SOAP_FMAC2 soap_instantiate_happy__UpdateHappyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__UpdateHappyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__UpdateHappyResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__UpdateHappyResponse);
		if (size)
			*size = sizeof(struct happy__UpdateHappyResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__UpdateHappyResponse, n);
		if (size)
			*size = n * sizeof(struct happy__UpdateHappyResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__UpdateHappyResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateHappyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__UpdateHappyResponse %p -> %p\n", q, p));
	*(struct happy__UpdateHappyResponse*)p = *(struct happy__UpdateHappyResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileAccept(struct soap *soap, struct happy__SendFileAccept *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileAccept(struct soap *soap, const struct happy__SendFileAccept *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileAccept(struct soap *soap, const char *tag, int id, const struct happy__SendFileAccept *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__SendFileAccept), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__SendFileAccept * SOAP_FMAC4 soap_in_happy__SendFileAccept(struct soap *soap, const char *tag, struct happy__SendFileAccept *a, const char *type)
{
	size_t soap_flag_key = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__SendFileAccept *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__SendFileAccept, sizeof(struct happy__SendFileAccept), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__SendFileAccept(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__SendFileAccept *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__SendFileAccept, 0, sizeof(struct happy__SendFileAccept), 0, soap_copy_happy__SendFileAccept);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileAccept(struct soap *soap, const struct happy__SendFileAccept *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__SendFileAccept);
	if (soap_out_happy__SendFileAccept(soap, tag?tag:"happy:SendFileAccept", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__SendFileAccept * SOAP_FMAC4 soap_get_happy__SendFileAccept(struct soap *soap, struct happy__SendFileAccept *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__SendFileAccept(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__SendFileAccept * SOAP_FMAC2 soap_instantiate_happy__SendFileAccept(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__SendFileAccept(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__SendFileAccept, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__SendFileAccept);
		if (size)
			*size = sizeof(struct happy__SendFileAccept);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__SendFileAccept, n);
		if (size)
			*size = n * sizeof(struct happy__SendFileAccept);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__SendFileAccept*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileAccept(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__SendFileAccept %p -> %p\n", q, p));
	*(struct happy__SendFileAccept*)p = *(struct happy__SendFileAccept*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileAcceptResponse(struct soap *soap, struct happy__SendFileAcceptResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileAcceptResponse(struct soap *soap, const struct happy__SendFileAcceptResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileAcceptResponse(struct soap *soap, const char *tag, int id, const struct happy__SendFileAcceptResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__SendFileAcceptResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__SendFileAcceptResponse * SOAP_FMAC4 soap_in_happy__SendFileAcceptResponse(struct soap *soap, const char *tag, struct happy__SendFileAcceptResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__SendFileAcceptResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__SendFileAcceptResponse, sizeof(struct happy__SendFileAcceptResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__SendFileAcceptResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__SendFileAcceptResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__SendFileAcceptResponse, 0, sizeof(struct happy__SendFileAcceptResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileAcceptResponse(struct soap *soap, const struct happy__SendFileAcceptResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__SendFileAcceptResponse);
	if (soap_out_happy__SendFileAcceptResponse(soap, tag?tag:"happy:SendFileAcceptResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__SendFileAcceptResponse * SOAP_FMAC4 soap_get_happy__SendFileAcceptResponse(struct soap *soap, struct happy__SendFileAcceptResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__SendFileAcceptResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__SendFileAcceptResponse * SOAP_FMAC2 soap_instantiate_happy__SendFileAcceptResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__SendFileAcceptResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__SendFileAcceptResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__SendFileAcceptResponse);
		if (size)
			*size = sizeof(struct happy__SendFileAcceptResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__SendFileAcceptResponse, n);
		if (size)
			*size = n * sizeof(struct happy__SendFileAcceptResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__SendFileAcceptResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileAcceptResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__SendFileAcceptResponse %p -> %p\n", q, p));
	*(struct happy__SendFileAcceptResponse*)p = *(struct happy__SendFileAcceptResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileExec(struct soap *soap, struct happy__SendFileExec *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileExec(struct soap *soap, const struct happy__SendFileExec *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileExec(struct soap *soap, const char *tag, int id, const struct happy__SendFileExec *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__SendFileExec), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__SendFileExec * SOAP_FMAC4 soap_in_happy__SendFileExec(struct soap *soap, const char *tag, struct happy__SendFileExec *a, const char *type)
{
	size_t soap_flag_key = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__SendFileExec *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__SendFileExec, sizeof(struct happy__SendFileExec), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__SendFileExec(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__SendFileExec *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__SendFileExec, 0, sizeof(struct happy__SendFileExec), 0, soap_copy_happy__SendFileExec);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileExec(struct soap *soap, const struct happy__SendFileExec *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__SendFileExec);
	if (soap_out_happy__SendFileExec(soap, tag?tag:"happy:SendFileExec", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__SendFileExec * SOAP_FMAC4 soap_get_happy__SendFileExec(struct soap *soap, struct happy__SendFileExec *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__SendFileExec(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__SendFileExec * SOAP_FMAC2 soap_instantiate_happy__SendFileExec(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__SendFileExec(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__SendFileExec, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__SendFileExec);
		if (size)
			*size = sizeof(struct happy__SendFileExec);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__SendFileExec, n);
		if (size)
			*size = n * sizeof(struct happy__SendFileExec);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__SendFileExec*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileExec(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__SendFileExec %p -> %p\n", q, p));
	*(struct happy__SendFileExec*)p = *(struct happy__SendFileExec*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileExecResponse(struct soap *soap, struct happy__SendFileExecResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileExecResponse(struct soap *soap, const struct happy__SendFileExecResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileExecResponse(struct soap *soap, const char *tag, int id, const struct happy__SendFileExecResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__SendFileExecResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__SendFileExecResponse * SOAP_FMAC4 soap_in_happy__SendFileExecResponse(struct soap *soap, const char *tag, struct happy__SendFileExecResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__SendFileExecResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__SendFileExecResponse, sizeof(struct happy__SendFileExecResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__SendFileExecResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__SendFileExecResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__SendFileExecResponse, 0, sizeof(struct happy__SendFileExecResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileExecResponse(struct soap *soap, const struct happy__SendFileExecResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__SendFileExecResponse);
	if (soap_out_happy__SendFileExecResponse(soap, tag?tag:"happy:SendFileExecResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__SendFileExecResponse * SOAP_FMAC4 soap_get_happy__SendFileExecResponse(struct soap *soap, struct happy__SendFileExecResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__SendFileExecResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__SendFileExecResponse * SOAP_FMAC2 soap_instantiate_happy__SendFileExecResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__SendFileExecResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__SendFileExecResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__SendFileExecResponse);
		if (size)
			*size = sizeof(struct happy__SendFileExecResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__SendFileExecResponse, n);
		if (size)
			*size = n * sizeof(struct happy__SendFileExecResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__SendFileExecResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileExecResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__SendFileExecResponse %p -> %p\n", q, p));
	*(struct happy__SendFileExecResponse*)p = *(struct happy__SendFileExecResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatGroup(struct soap *soap, struct happy__ChatGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->gkey);
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatGroup(struct soap *soap, const struct happy__ChatGroup *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->gkey, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->gkey);
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatGroup(struct soap *soap, const char *tag, int id, const struct happy__ChatGroup *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__ChatGroup), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "gkey", -1, &a->gkey, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__ChatGroup * SOAP_FMAC4 soap_in_happy__ChatGroup(struct soap *soap, const char *tag, struct happy__ChatGroup *a, const char *type)
{
	size_t soap_flag_gkey = 1;
	size_t soap_flag_key = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__ChatGroup *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__ChatGroup, sizeof(struct happy__ChatGroup), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__ChatGroup(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_gkey && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "gkey", &a->gkey, "xsd:string"))
				{	soap_flag_gkey--;
					continue;
				}
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__ChatGroup *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__ChatGroup, 0, sizeof(struct happy__ChatGroup), 0, soap_copy_happy__ChatGroup);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_gkey > 0 || soap_flag_key > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatGroup(struct soap *soap, const struct happy__ChatGroup *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__ChatGroup);
	if (soap_out_happy__ChatGroup(soap, tag?tag:"happy:ChatGroup", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__ChatGroup * SOAP_FMAC4 soap_get_happy__ChatGroup(struct soap *soap, struct happy__ChatGroup *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__ChatGroup(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__ChatGroup * SOAP_FMAC2 soap_instantiate_happy__ChatGroup(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__ChatGroup(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__ChatGroup, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__ChatGroup);
		if (size)
			*size = sizeof(struct happy__ChatGroup);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__ChatGroup, n);
		if (size)
			*size = n * sizeof(struct happy__ChatGroup);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__ChatGroup*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatGroup(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__ChatGroup %p -> %p\n", q, p));
	*(struct happy__ChatGroup*)p = *(struct happy__ChatGroup*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatGroupResponse(struct soap *soap, struct happy__ChatGroupResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatGroupResponse(struct soap *soap, const struct happy__ChatGroupResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatGroupResponse(struct soap *soap, const char *tag, int id, const struct happy__ChatGroupResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__ChatGroupResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__ChatGroupResponse * SOAP_FMAC4 soap_in_happy__ChatGroupResponse(struct soap *soap, const char *tag, struct happy__ChatGroupResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__ChatGroupResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__ChatGroupResponse, sizeof(struct happy__ChatGroupResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__ChatGroupResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__ChatGroupResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__ChatGroupResponse, 0, sizeof(struct happy__ChatGroupResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatGroupResponse(struct soap *soap, const struct happy__ChatGroupResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__ChatGroupResponse);
	if (soap_out_happy__ChatGroupResponse(soap, tag?tag:"happy:ChatGroupResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__ChatGroupResponse * SOAP_FMAC4 soap_get_happy__ChatGroupResponse(struct soap *soap, struct happy__ChatGroupResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__ChatGroupResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__ChatGroupResponse * SOAP_FMAC2 soap_instantiate_happy__ChatGroupResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__ChatGroupResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__ChatGroupResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__ChatGroupResponse);
		if (size)
			*size = sizeof(struct happy__ChatGroupResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__ChatGroupResponse, n);
		if (size)
			*size = n * sizeof(struct happy__ChatGroupResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__ChatGroupResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatGroupResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__ChatGroupResponse %p -> %p\n", q, p));
	*(struct happy__ChatGroupResponse*)p = *(struct happy__ChatGroupResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SetResource(struct soap *soap, struct happy__SetResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->desuid);
	soap_default_std__wstring(soap, &a->type);
	soap_default_std__wstring(soap, &a->resource);
	soap_default_std__wstring(soap, &a->resname);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SetResource(struct soap *soap, const struct happy__SetResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->desuid, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->desuid);
	soap_embedded(soap, &a->type, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->type);
	soap_embedded(soap, &a->resource, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->resource);
	soap_embedded(soap, &a->resname, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->resname);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SetResource(struct soap *soap, const char *tag, int id, const struct happy__SetResource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__SetResource), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "desuid", -1, &a->desuid, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "resource", -1, &a->resource, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "resname", -1, &a->resname, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__SetResource * SOAP_FMAC4 soap_in_happy__SetResource(struct soap *soap, const char *tag, struct happy__SetResource *a, const char *type)
{
	size_t soap_flag_desuid = 1;
	size_t soap_flag_type = 1;
	size_t soap_flag_resource = 1;
	size_t soap_flag_resname = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__SetResource *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__SetResource, sizeof(struct happy__SetResource), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__SetResource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_desuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "desuid", &a->desuid, "xsd:string"))
				{	soap_flag_desuid--;
					continue;
				}
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			if (soap_flag_resource && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "resource", &a->resource, "xsd:string"))
				{	soap_flag_resource--;
					continue;
				}
			if (soap_flag_resname && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "resname", &a->resname, "xsd:string"))
				{	soap_flag_resname--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__SetResource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__SetResource, 0, sizeof(struct happy__SetResource), 0, soap_copy_happy__SetResource);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_desuid > 0 || soap_flag_type > 0 || soap_flag_resource > 0 || soap_flag_resname > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SetResource(struct soap *soap, const struct happy__SetResource *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__SetResource);
	if (soap_out_happy__SetResource(soap, tag?tag:"happy:SetResource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__SetResource * SOAP_FMAC4 soap_get_happy__SetResource(struct soap *soap, struct happy__SetResource *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__SetResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__SetResource * SOAP_FMAC2 soap_instantiate_happy__SetResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__SetResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__SetResource, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__SetResource);
		if (size)
			*size = sizeof(struct happy__SetResource);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__SetResource, n);
		if (size)
			*size = n * sizeof(struct happy__SetResource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__SetResource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SetResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__SetResource %p -> %p\n", q, p));
	*(struct happy__SetResource*)p = *(struct happy__SetResource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SetResourceResponse(struct soap *soap, struct happy__SetResourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->len = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SetResourceResponse(struct soap *soap, const struct happy__SetResourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->len);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SetResourceResponse(struct soap *soap, const char *tag, int id, const struct happy__SetResourceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__SetResourceResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "len", -1, &a->len, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__SetResourceResponse * SOAP_FMAC4 soap_in_happy__SetResourceResponse(struct soap *soap, const char *tag, struct happy__SetResourceResponse *a, const char *type)
{
	size_t soap_flag_len = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__SetResourceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__SetResourceResponse, sizeof(struct happy__SetResourceResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__SetResourceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_len && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "len", &a->len, "xsd:int"))
				{	soap_flag_len--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__SetResourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__SetResourceResponse, 0, sizeof(struct happy__SetResourceResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SetResourceResponse(struct soap *soap, const struct happy__SetResourceResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__SetResourceResponse);
	if (soap_out_happy__SetResourceResponse(soap, tag?tag:"happy:SetResourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__SetResourceResponse * SOAP_FMAC4 soap_get_happy__SetResourceResponse(struct soap *soap, struct happy__SetResourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__SetResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__SetResourceResponse * SOAP_FMAC2 soap_instantiate_happy__SetResourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__SetResourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__SetResourceResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__SetResourceResponse);
		if (size)
			*size = sizeof(struct happy__SetResourceResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__SetResourceResponse, n);
		if (size)
			*size = n * sizeof(struct happy__SetResourceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__SetResourceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SetResourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__SetResourceResponse %p -> %p\n", q, p));
	*(struct happy__SetResourceResponse*)p = *(struct happy__SetResourceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__GetResource(struct soap *soap, struct happy__GetResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->srcuid);
	soap_default_std__wstring(soap, &a->srcuip);
	soap_default_std__wstring(soap, &a->type);
	soap_default_std__wstring(soap, &a->resource);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__GetResource(struct soap *soap, const struct happy__GetResource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->srcuid, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->srcuid);
	soap_embedded(soap, &a->srcuip, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->srcuip);
	soap_embedded(soap, &a->type, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->type);
	soap_embedded(soap, &a->resource, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->resource);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__GetResource(struct soap *soap, const char *tag, int id, const struct happy__GetResource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__GetResource), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "srcuid", -1, &a->srcuid, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "srcuip", -1, &a->srcuip, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "type", -1, &a->type, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "resource", -1, &a->resource, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__GetResource * SOAP_FMAC4 soap_in_happy__GetResource(struct soap *soap, const char *tag, struct happy__GetResource *a, const char *type)
{
	size_t soap_flag_srcuid = 1;
	size_t soap_flag_srcuip = 1;
	size_t soap_flag_type = 1;
	size_t soap_flag_resource = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__GetResource *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__GetResource, sizeof(struct happy__GetResource), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__GetResource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_srcuid && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "srcuid", &a->srcuid, "xsd:string"))
				{	soap_flag_srcuid--;
					continue;
				}
			if (soap_flag_srcuip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "srcuip", &a->srcuip, "xsd:string"))
				{	soap_flag_srcuip--;
					continue;
				}
			if (soap_flag_type && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "type", &a->type, "xsd:string"))
				{	soap_flag_type--;
					continue;
				}
			if (soap_flag_resource && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "resource", &a->resource, "xsd:string"))
				{	soap_flag_resource--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__GetResource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__GetResource, 0, sizeof(struct happy__GetResource), 0, soap_copy_happy__GetResource);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_srcuid > 0 || soap_flag_srcuip > 0 || soap_flag_type > 0 || soap_flag_resource > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__GetResource(struct soap *soap, const struct happy__GetResource *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__GetResource);
	if (soap_out_happy__GetResource(soap, tag?tag:"happy:GetResource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__GetResource * SOAP_FMAC4 soap_get_happy__GetResource(struct soap *soap, struct happy__GetResource *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__GetResource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__GetResource * SOAP_FMAC2 soap_instantiate_happy__GetResource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__GetResource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__GetResource, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__GetResource);
		if (size)
			*size = sizeof(struct happy__GetResource);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__GetResource, n);
		if (size)
			*size = n * sizeof(struct happy__GetResource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__GetResource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__GetResource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__GetResource %p -> %p\n", q, p));
	*(struct happy__GetResource*)p = *(struct happy__GetResource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__GetResourceResponse(struct soap *soap, struct happy__GetResourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->len = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__GetResourceResponse(struct soap *soap, const struct happy__GetResourceResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->len);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__GetResourceResponse(struct soap *soap, const char *tag, int id, const struct happy__GetResourceResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__GetResourceResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "len", -1, &a->len, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__GetResourceResponse * SOAP_FMAC4 soap_in_happy__GetResourceResponse(struct soap *soap, const char *tag, struct happy__GetResourceResponse *a, const char *type)
{
	size_t soap_flag_len = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__GetResourceResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__GetResourceResponse, sizeof(struct happy__GetResourceResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__GetResourceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_len && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "len", &a->len, "xsd:int"))
				{	soap_flag_len--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__GetResourceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__GetResourceResponse, 0, sizeof(struct happy__GetResourceResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__GetResourceResponse(struct soap *soap, const struct happy__GetResourceResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__GetResourceResponse);
	if (soap_out_happy__GetResourceResponse(soap, tag?tag:"happy:GetResourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__GetResourceResponse * SOAP_FMAC4 soap_get_happy__GetResourceResponse(struct soap *soap, struct happy__GetResourceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__GetResourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__GetResourceResponse * SOAP_FMAC2 soap_instantiate_happy__GetResourceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__GetResourceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__GetResourceResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__GetResourceResponse);
		if (size)
			*size = sizeof(struct happy__GetResourceResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__GetResourceResponse, n);
		if (size)
			*size = n * sizeof(struct happy__GetResourceResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__GetResourceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__GetResourceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__GetResourceResponse %p -> %p\n", q, p));
	*(struct happy__GetResourceResponse*)p = *(struct happy__GetResourceResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatShake(struct soap *soap, struct happy__ChatShake *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatShake(struct soap *soap, const struct happy__ChatShake *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatShake(struct soap *soap, const char *tag, int id, const struct happy__ChatShake *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__ChatShake), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__ChatShake * SOAP_FMAC4 soap_in_happy__ChatShake(struct soap *soap, const char *tag, struct happy__ChatShake *a, const char *type)
{
	size_t soap_flag_key = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__ChatShake *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__ChatShake, sizeof(struct happy__ChatShake), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__ChatShake(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__ChatShake *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__ChatShake, 0, sizeof(struct happy__ChatShake), 0, soap_copy_happy__ChatShake);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatShake(struct soap *soap, const struct happy__ChatShake *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__ChatShake);
	if (soap_out_happy__ChatShake(soap, tag?tag:"happy:ChatShake", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__ChatShake * SOAP_FMAC4 soap_get_happy__ChatShake(struct soap *soap, struct happy__ChatShake *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__ChatShake(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__ChatShake * SOAP_FMAC2 soap_instantiate_happy__ChatShake(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__ChatShake(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__ChatShake, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__ChatShake);
		if (size)
			*size = sizeof(struct happy__ChatShake);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__ChatShake, n);
		if (size)
			*size = n * sizeof(struct happy__ChatShake);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__ChatShake*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatShake(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__ChatShake %p -> %p\n", q, p));
	*(struct happy__ChatShake*)p = *(struct happy__ChatShake*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatShakeResponse(struct soap *soap, struct happy__ChatShakeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatShakeResponse(struct soap *soap, const struct happy__ChatShakeResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatShakeResponse(struct soap *soap, const char *tag, int id, const struct happy__ChatShakeResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__ChatShakeResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__ChatShakeResponse * SOAP_FMAC4 soap_in_happy__ChatShakeResponse(struct soap *soap, const char *tag, struct happy__ChatShakeResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__ChatShakeResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__ChatShakeResponse, sizeof(struct happy__ChatShakeResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__ChatShakeResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__ChatShakeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__ChatShakeResponse, 0, sizeof(struct happy__ChatShakeResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatShakeResponse(struct soap *soap, const struct happy__ChatShakeResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__ChatShakeResponse);
	if (soap_out_happy__ChatShakeResponse(soap, tag?tag:"happy:ChatShakeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__ChatShakeResponse * SOAP_FMAC4 soap_get_happy__ChatShakeResponse(struct soap *soap, struct happy__ChatShakeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__ChatShakeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__ChatShakeResponse * SOAP_FMAC2 soap_instantiate_happy__ChatShakeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__ChatShakeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__ChatShakeResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__ChatShakeResponse);
		if (size)
			*size = sizeof(struct happy__ChatShakeResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__ChatShakeResponse, n);
		if (size)
			*size = n * sizeof(struct happy__ChatShakeResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__ChatShakeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatShakeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__ChatShakeResponse %p -> %p\n", q, p));
	*(struct happy__ChatShakeResponse*)p = *(struct happy__ChatShakeResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatOneByOne(struct soap *soap, struct happy__ChatOneByOne *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__wstring(soap, &a->key);
	soap_default_std__wstring(soap, &a->content);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatOneByOne(struct soap *soap, const struct happy__ChatOneByOne *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->key, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->key);
	soap_embedded(soap, &a->content, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &a->content);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatOneByOne(struct soap *soap, const char *tag, int id, const struct happy__ChatOneByOne *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__ChatOneByOne), type))
		return soap->error;
	if (soap_out_std__wstring(soap, "key", -1, &a->key, ""))
		return soap->error;
	if (soap_out_std__wstring(soap, "content", -1, &a->content, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__ChatOneByOne * SOAP_FMAC4 soap_in_happy__ChatOneByOne(struct soap *soap, const char *tag, struct happy__ChatOneByOne *a, const char *type)
{
	size_t soap_flag_key = 1;
	size_t soap_flag_content = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__ChatOneByOne *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_happy__ChatOneByOne, sizeof(struct happy__ChatOneByOne), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_happy__ChatOneByOne(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "key", &a->key, "xsd:string"))
				{	soap_flag_key--;
					continue;
				}
			if (soap_flag_content && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__wstring(soap, "content", &a->content, "xsd:string"))
				{	soap_flag_content--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__ChatOneByOne *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__ChatOneByOne, 0, sizeof(struct happy__ChatOneByOne), 0, soap_copy_happy__ChatOneByOne);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_key > 0 || soap_flag_content > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatOneByOne(struct soap *soap, const struct happy__ChatOneByOne *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__ChatOneByOne);
	if (soap_out_happy__ChatOneByOne(soap, tag?tag:"happy:ChatOneByOne", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__ChatOneByOne * SOAP_FMAC4 soap_get_happy__ChatOneByOne(struct soap *soap, struct happy__ChatOneByOne *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__ChatOneByOne(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__ChatOneByOne * SOAP_FMAC2 soap_instantiate_happy__ChatOneByOne(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__ChatOneByOne(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__ChatOneByOne, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__ChatOneByOne);
		if (size)
			*size = sizeof(struct happy__ChatOneByOne);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__ChatOneByOne, n);
		if (size)
			*size = n * sizeof(struct happy__ChatOneByOne);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__ChatOneByOne*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatOneByOne(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__ChatOneByOne %p -> %p\n", q, p));
	*(struct happy__ChatOneByOne*)p = *(struct happy__ChatOneByOne*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatOneByOneResponse(struct soap *soap, struct happy__ChatOneByOneResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatOneByOneResponse(struct soap *soap, const struct happy__ChatOneByOneResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__wstring(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatOneByOneResponse(struct soap *soap, const char *tag, int id, const struct happy__ChatOneByOneResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_happy__ChatOneByOneResponse), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct happy__ChatOneByOneResponse * SOAP_FMAC4 soap_in_happy__ChatOneByOneResponse(struct soap *soap, const char *tag, struct happy__ChatOneByOneResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct happy__ChatOneByOneResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_happy__ChatOneByOneResponse, sizeof(struct happy__ChatOneByOneResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_happy__ChatOneByOneResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "result", &a->result, "xsd:string"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct happy__ChatOneByOneResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_happy__ChatOneByOneResponse, 0, sizeof(struct happy__ChatOneByOneResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatOneByOneResponse(struct soap *soap, const struct happy__ChatOneByOneResponse *a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_happy__ChatOneByOneResponse);
	if (soap_out_happy__ChatOneByOneResponse(soap, tag?tag:"happy:ChatOneByOneResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct happy__ChatOneByOneResponse * SOAP_FMAC4 soap_get_happy__ChatOneByOneResponse(struct soap *soap, struct happy__ChatOneByOneResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_happy__ChatOneByOneResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct happy__ChatOneByOneResponse * SOAP_FMAC2 soap_instantiate_happy__ChatOneByOneResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_happy__ChatOneByOneResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_happy__ChatOneByOneResponse, n, soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = SOAP_NEW(struct happy__ChatOneByOneResponse);
		if (size)
			*size = sizeof(struct happy__ChatOneByOneResponse);
	}
	else
	{	cp->ptr = SOAP_NEW_ARRAY(struct happy__ChatOneByOneResponse, n);
		if (size)
			*size = n * sizeof(struct happy__ChatOneByOneResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct happy__ChatOneByOneResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatOneByOneResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct happy__ChatOneByOneResponse %p -> %p\n", q, p));
	*(struct happy__ChatOneByOneResponse*)p = *(struct happy__ChatOneByOneResponse*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_PointerTostd__wstring);
	if (soap_out_PointerTostd__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
