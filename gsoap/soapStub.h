/* soapStub.h
   Generated by gSOAP 2.8.23 from happyservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#ifndef HAPPYSERVICE
#define HAPPYSERVICE
#endif // HAPPYSERVICE
#include "stdsoap2.h"
#if GSOAP_VERSION != 20823
# error "GSOAP VERSION 20823 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_happy__ChatOneByOneResponse
#define SOAP_TYPE_happy__ChatOneByOneResponse (10)
/* happy:ChatOneByOneResponse */
struct happy__ChatOneByOneResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 10; } /* = unique type id SOAP_TYPE_happy__ChatOneByOneResponse */
};
#endif

#ifndef SOAP_TYPE_happy__ChatOneByOne
#define SOAP_TYPE_happy__ChatOneByOne (11)
/* happy:ChatOneByOne */
struct happy__ChatOneByOne
{
public:
	std::wstring key;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 11; } /* = unique type id SOAP_TYPE_happy__ChatOneByOne */
};
#endif

#ifndef SOAP_TYPE_happy__ChatShakeResponse
#define SOAP_TYPE_happy__ChatShakeResponse (13)
/* happy:ChatShakeResponse */
struct happy__ChatShakeResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_happy__ChatShakeResponse */
};
#endif

#ifndef SOAP_TYPE_happy__ChatShake
#define SOAP_TYPE_happy__ChatShake (14)
/* happy:ChatShake */
struct happy__ChatShake
{
public:
	std::wstring key;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 14; } /* = unique type id SOAP_TYPE_happy__ChatShake */
};
#endif

#ifndef SOAP_TYPE_happy__GetResourceResponse
#define SOAP_TYPE_happy__GetResourceResponse (17)
/* happy:GetResourceResponse */
struct happy__GetResourceResponse
{
public:
	int *len;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
public:
	int soap_type() const { return 17; } /* = unique type id SOAP_TYPE_happy__GetResourceResponse */
};
#endif

#ifndef SOAP_TYPE_happy__GetResource
#define SOAP_TYPE_happy__GetResource (18)
/* happy:GetResource */
struct happy__GetResource
{
public:
	std::wstring srcuid;	/* required element of type xsd:string */
	std::wstring srcuip;	/* required element of type xsd:string */
	std::wstring type;	/* required element of type xsd:string */
	std::wstring resource;	/* required element of type xsd:string */
public:
	int soap_type() const { return 18; } /* = unique type id SOAP_TYPE_happy__GetResource */
};
#endif

#ifndef SOAP_TYPE_happy__SetResourceResponse
#define SOAP_TYPE_happy__SetResourceResponse (20)
/* happy:SetResourceResponse */
struct happy__SetResourceResponse
{
public:
	int *len;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:int */
public:
	int soap_type() const { return 20; } /* = unique type id SOAP_TYPE_happy__SetResourceResponse */
};
#endif

#ifndef SOAP_TYPE_happy__SetResource
#define SOAP_TYPE_happy__SetResource (21)
/* happy:SetResource */
struct happy__SetResource
{
public:
	std::wstring desuid;	/* required element of type xsd:string */
	std::wstring type;	/* required element of type xsd:string */
	std::wstring resource;	/* required element of type xsd:string */
	std::wstring resname;	/* required element of type xsd:string */
public:
	int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_happy__SetResource */
};
#endif

#ifndef SOAP_TYPE_happy__ChatGroupResponse
#define SOAP_TYPE_happy__ChatGroupResponse (23)
/* happy:ChatGroupResponse */
struct happy__ChatGroupResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 23; } /* = unique type id SOAP_TYPE_happy__ChatGroupResponse */
};
#endif

#ifndef SOAP_TYPE_happy__ChatGroup
#define SOAP_TYPE_happy__ChatGroup (24)
/* happy:ChatGroup */
struct happy__ChatGroup
{
public:
	std::wstring gkey;	/* required element of type xsd:string */
	std::wstring key;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_happy__ChatGroup */
};
#endif

#ifndef SOAP_TYPE_happy__SendFileExecResponse
#define SOAP_TYPE_happy__SendFileExecResponse (26)
/* happy:SendFileExecResponse */
struct happy__SendFileExecResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 26; } /* = unique type id SOAP_TYPE_happy__SendFileExecResponse */
};
#endif

#ifndef SOAP_TYPE_happy__SendFileExec
#define SOAP_TYPE_happy__SendFileExec (27)
/* happy:SendFileExec */
struct happy__SendFileExec
{
public:
	std::wstring key;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 27; } /* = unique type id SOAP_TYPE_happy__SendFileExec */
};
#endif

#ifndef SOAP_TYPE_happy__SendFileAcceptResponse
#define SOAP_TYPE_happy__SendFileAcceptResponse (29)
/* happy:SendFileAcceptResponse */
struct happy__SendFileAcceptResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_happy__SendFileAcceptResponse */
};
#endif

#ifndef SOAP_TYPE_happy__SendFileAccept
#define SOAP_TYPE_happy__SendFileAccept (30)
/* happy:SendFileAccept */
struct happy__SendFileAccept
{
public:
	std::wstring key;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 30; } /* = unique type id SOAP_TYPE_happy__SendFileAccept */
};
#endif

#ifndef SOAP_TYPE_happy__UpdateHappyResponse
#define SOAP_TYPE_happy__UpdateHappyResponse (32)
/* happy:UpdateHappyResponse */
struct happy__UpdateHappyResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_happy__UpdateHappyResponse */
};
#endif

#ifndef SOAP_TYPE_happy__UpdateHappy
#define SOAP_TYPE_happy__UpdateHappy (33)
/* happy:UpdateHappy */
struct happy__UpdateHappy
{
public:
	std::wstring key;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_happy__UpdateHappy */
};
#endif

#ifndef SOAP_TYPE_happy__InviteGroupResponse
#define SOAP_TYPE_happy__InviteGroupResponse (35)
/* happy:InviteGroupResponse */
struct happy__InviteGroupResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_happy__InviteGroupResponse */
};
#endif

#ifndef SOAP_TYPE_happy__InviteGroup
#define SOAP_TYPE_happy__InviteGroup (36)
/* happy:InviteGroup */
struct happy__InviteGroup
{
public:
	std::wstring builder;	/* required element of type xsd:string */
	std::wstring title;	/* required element of type xsd:string */
	std::wstring gkey;	/* required element of type xsd:string */
	std::wstring members;	/* required element of type xsd:string */
public:
	int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_happy__InviteGroup */
};
#endif

#ifndef SOAP_TYPE_happy__InviteGroupRespondResponse
#define SOAP_TYPE_happy__InviteGroupRespondResponse (38)
/* happy:InviteGroupRespondResponse */
struct happy__InviteGroupRespondResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 38; } /* = unique type id SOAP_TYPE_happy__InviteGroupRespondResponse */
};
#endif

#ifndef SOAP_TYPE_happy__InviteGroupRespond
#define SOAP_TYPE_happy__InviteGroupRespond (39)
/* happy:InviteGroupRespond */
struct happy__InviteGroupRespond
{
public:
	std::wstring key;	/* required element of type xsd:string */
	std::wstring gkey;	/* required element of type xsd:string */
	std::wstring content;	/* required element of type xsd:string */
public:
	int soap_type() const { return 39; } /* = unique type id SOAP_TYPE_happy__InviteGroupRespond */
};
#endif

#ifndef SOAP_TYPE_happy__UpdateGroupUserResponse
#define SOAP_TYPE_happy__UpdateGroupUserResponse (41)
/* happy:UpdateGroupUserResponse */
struct happy__UpdateGroupUserResponse
{
public:
	std::wstring *result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
public:
	int soap_type() const { return 41; } /* = unique type id SOAP_TYPE_happy__UpdateGroupUserResponse */
};
#endif

#ifndef SOAP_TYPE_happy__UpdateGroupUser
#define SOAP_TYPE_happy__UpdateGroupUser (42)
/* happy:UpdateGroupUser */
struct happy__UpdateGroupUser
{
public:
	std::wstring gkey;	/* required element of type xsd:string */
	std::wstring newusers;	/* required element of type xsd:string */
public:
	int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_happy__UpdateGroupUser */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (43)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 43; } /* = unique type id SOAP_TYPE_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (44)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (46)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 46; } /* = unique type id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (49)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 49; } /* = unique type id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (50)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 50; } /* = unique type id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
