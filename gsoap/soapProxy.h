/* soapProxy.h
   Generated by gSOAP 2.8.23 from happyservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapProxy_H
#define soapProxy_H
#include "soapH.h"

class SOAP_CMAC Proxy : public soap
{ public:
	/// Endpoint URL of service 'Proxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in happyservice.h (non-static)
	/// Constructor
	Proxy();
	/// Construct from another engine state
	Proxy(const struct soap&);
	/// Constructor with endpoint URL
	Proxy(const char *url);
	/// Constructor with engine input+output mode control
	Proxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	Proxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	Proxy(soap_mode imode, soap_mode omode);
	/// Destructor deletes deserialized data and engine context
	virtual	~Proxy();
	/// Initializer used by constructors
	virtual	void Proxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'ChatOneByOne' (returns error code or SOAP_OK)
	virtual	int ChatOneByOne(std::wstring key, std::wstring content, std::wstring *result) { return this->ChatOneByOne(NULL, NULL, key, content, result); }
	virtual	int ChatOneByOne(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result);

	/// Web service operation 'ChatShake' (returns error code or SOAP_OK)
	virtual	int ChatShake(std::wstring key, std::wstring content, std::wstring *result) { return this->ChatShake(NULL, NULL, key, content, result); }
	virtual	int ChatShake(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result);

	/// Web service operation 'GetResource' (returns error code or SOAP_OK)
	virtual	int GetResource(std::wstring srcuid, std::wstring srcuip, std::wstring type, std::wstring resource, int *len) { return this->GetResource(NULL, NULL, srcuid, srcuip, type, resource, len); }
	virtual	int GetResource(const char *endpoint, const char *soap_action, std::wstring srcuid, std::wstring srcuip, std::wstring type, std::wstring resource, int *len);

	/// Web service operation 'SetResource' (returns error code or SOAP_OK)
	virtual	int SetResource(std::wstring desuid, std::wstring type, std::wstring resource, std::wstring resname, int *len) { return this->SetResource(NULL, NULL, desuid, type, resource, resname, len); }
	virtual	int SetResource(const char *endpoint, const char *soap_action, std::wstring desuid, std::wstring type, std::wstring resource, std::wstring resname, int *len);

	/// Web service operation 'ChatGroup' (returns error code or SOAP_OK)
	virtual	int ChatGroup(std::wstring gkey, std::wstring key, std::wstring content, std::wstring *result) { return this->ChatGroup(NULL, NULL, gkey, key, content, result); }
	virtual	int ChatGroup(const char *endpoint, const char *soap_action, std::wstring gkey, std::wstring key, std::wstring content, std::wstring *result);

	/// Web service operation 'SendFileExec' (returns error code or SOAP_OK)
	virtual	int SendFileExec(std::wstring key, std::wstring content, std::wstring *result) { return this->SendFileExec(NULL, NULL, key, content, result); }
	virtual	int SendFileExec(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result);

	/// Web service operation 'SendFileAccept' (returns error code or SOAP_OK)
	virtual	int SendFileAccept(std::wstring key, std::wstring content, std::wstring *result) { return this->SendFileAccept(NULL, NULL, key, content, result); }
	virtual	int SendFileAccept(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result);

	/// Web service operation 'UpdateHappy' (returns error code or SOAP_OK)
	virtual	int UpdateHappy(std::wstring key, std::wstring content, std::wstring *result) { return this->UpdateHappy(NULL, NULL, key, content, result); }
	virtual	int UpdateHappy(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result);

	/// Web service operation 'InviteGroup' (returns error code or SOAP_OK)
	virtual	int InviteGroup(std::wstring builder, std::wstring title, std::wstring gkey, std::wstring members, std::wstring *result) { return this->InviteGroup(NULL, NULL, builder, title, gkey, members, result); }
	virtual	int InviteGroup(const char *endpoint, const char *soap_action, std::wstring builder, std::wstring title, std::wstring gkey, std::wstring members, std::wstring *result);

	/// Web service operation 'InviteGroupRespond' (returns error code or SOAP_OK)
	virtual	int InviteGroupRespond(std::wstring key, std::wstring gkey, std::wstring content, std::wstring *result) { return this->InviteGroupRespond(NULL, NULL, key, gkey, content, result); }
	virtual	int InviteGroupRespond(const char *endpoint, const char *soap_action, std::wstring key, std::wstring gkey, std::wstring content, std::wstring *result);

	/// Web service operation 'UpdateGroupUser' (returns error code or SOAP_OK)
	virtual	int UpdateGroupUser(std::wstring gkey, std::wstring newusers, std::wstring *result) { return this->UpdateGroupUser(NULL, NULL, gkey, newusers, result); }
	virtual	int UpdateGroupUser(const char *endpoint, const char *soap_action, std::wstring gkey, std::wstring newusers, std::wstring *result);
};
#endif
