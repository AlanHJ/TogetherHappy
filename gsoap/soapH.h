/* soapH.h
   Generated by gSOAP 2.8.23 from happyservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data), 0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data), 0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__wstring
#define SOAP_TYPE_std__wstring (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap*, std::wstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap*, const std::wstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap*, const char*, int, const std::wstring*, const char*);
SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap*, const char*, std::wstring*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap*, const std::wstring *, const char*, const char*);

#ifndef soap_write_std__wstring
#define soap_write_std__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__wstring(soap, data), 0) || soap_put_std__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap*, std::wstring *, const char*, const char*);

#ifndef soap_read_std__wstring
#define soap_read_std__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_std__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap*, int, const char*, const char*, size_t*);

inline std::wstring * soap_new_std__wstring(struct soap *soap, int n = -1) { return soap_instantiate_std__wstring(soap, n, NULL, NULL, NULL); }

inline std::wstring * soap_new_req_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline std::wstring * soap_new_set_std__wstring(struct soap *soap) { std::wstring *_p = soap_instantiate_std__wstring(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__wstring(soap, _p); } return _p; }

inline void soap_delete_std__wstring(struct soap *soap, std::wstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (50)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (46)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (43)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_happy__UpdateGroupUser
#define SOAP_TYPE_happy__UpdateGroupUser (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateGroupUser(struct soap*, struct happy__UpdateGroupUser *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateGroupUser(struct soap*, const struct happy__UpdateGroupUser *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateGroupUser(struct soap*, const char*, int, const struct happy__UpdateGroupUser *, const char*);
SOAP_FMAC3 struct happy__UpdateGroupUser * SOAP_FMAC4 soap_in_happy__UpdateGroupUser(struct soap*, const char*, struct happy__UpdateGroupUser *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateGroupUser(struct soap*, const struct happy__UpdateGroupUser *, const char*, const char*);

#ifndef soap_write_happy__UpdateGroupUser
#define soap_write_happy__UpdateGroupUser(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__UpdateGroupUser(soap, data), 0) || soap_put_happy__UpdateGroupUser(soap, data, "happy:UpdateGroupUser", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__UpdateGroupUser * SOAP_FMAC4 soap_get_happy__UpdateGroupUser(struct soap*, struct happy__UpdateGroupUser *, const char*, const char*);

#ifndef soap_read_happy__UpdateGroupUser
#define soap_read_happy__UpdateGroupUser(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__UpdateGroupUser(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__UpdateGroupUser * SOAP_FMAC2 soap_instantiate_happy__UpdateGroupUser(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__UpdateGroupUser * soap_new_happy__UpdateGroupUser(struct soap *soap, int n = -1) { return soap_instantiate_happy__UpdateGroupUser(soap, n, NULL, NULL, NULL); }

inline struct happy__UpdateGroupUser * soap_new_req_happy__UpdateGroupUser(struct soap *soap, const std::wstring& gkey, const std::wstring& newusers) { struct happy__UpdateGroupUser *_p = soap_instantiate_happy__UpdateGroupUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateGroupUser(soap, _p); _p->gkey = gkey; _p->newusers = newusers; } return _p; }

inline struct happy__UpdateGroupUser * soap_new_set_happy__UpdateGroupUser(struct soap *soap, const std::wstring& gkey, const std::wstring& newusers) { struct happy__UpdateGroupUser *_p = soap_instantiate_happy__UpdateGroupUser(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateGroupUser(soap, _p); _p->gkey = gkey; _p->newusers = newusers; } return _p; }

inline void soap_delete_happy__UpdateGroupUser(struct soap *soap, struct happy__UpdateGroupUser *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateGroupUser(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__UpdateGroupUserResponse
#define SOAP_TYPE_happy__UpdateGroupUserResponse (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateGroupUserResponse(struct soap*, struct happy__UpdateGroupUserResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateGroupUserResponse(struct soap*, const struct happy__UpdateGroupUserResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateGroupUserResponse(struct soap*, const char*, int, const struct happy__UpdateGroupUserResponse *, const char*);
SOAP_FMAC3 struct happy__UpdateGroupUserResponse * SOAP_FMAC4 soap_in_happy__UpdateGroupUserResponse(struct soap*, const char*, struct happy__UpdateGroupUserResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateGroupUserResponse(struct soap*, const struct happy__UpdateGroupUserResponse *, const char*, const char*);

#ifndef soap_write_happy__UpdateGroupUserResponse
#define soap_write_happy__UpdateGroupUserResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__UpdateGroupUserResponse(soap, data), 0) || soap_put_happy__UpdateGroupUserResponse(soap, data, "happy:UpdateGroupUserResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__UpdateGroupUserResponse * SOAP_FMAC4 soap_get_happy__UpdateGroupUserResponse(struct soap*, struct happy__UpdateGroupUserResponse *, const char*, const char*);

#ifndef soap_read_happy__UpdateGroupUserResponse
#define soap_read_happy__UpdateGroupUserResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__UpdateGroupUserResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__UpdateGroupUserResponse * SOAP_FMAC2 soap_instantiate_happy__UpdateGroupUserResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__UpdateGroupUserResponse * soap_new_happy__UpdateGroupUserResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__UpdateGroupUserResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__UpdateGroupUserResponse * soap_new_req_happy__UpdateGroupUserResponse(struct soap *soap) { struct happy__UpdateGroupUserResponse *_p = soap_instantiate_happy__UpdateGroupUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateGroupUserResponse(soap, _p); } return _p; }

inline struct happy__UpdateGroupUserResponse * soap_new_set_happy__UpdateGroupUserResponse(struct soap *soap, std::wstring *result) { struct happy__UpdateGroupUserResponse *_p = soap_instantiate_happy__UpdateGroupUserResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateGroupUserResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__UpdateGroupUserResponse(struct soap *soap, struct happy__UpdateGroupUserResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateGroupUserResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__InviteGroupRespond
#define SOAP_TYPE_happy__InviteGroupRespond (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroupRespond(struct soap*, struct happy__InviteGroupRespond *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroupRespond(struct soap*, const struct happy__InviteGroupRespond *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroupRespond(struct soap*, const char*, int, const struct happy__InviteGroupRespond *, const char*);
SOAP_FMAC3 struct happy__InviteGroupRespond * SOAP_FMAC4 soap_in_happy__InviteGroupRespond(struct soap*, const char*, struct happy__InviteGroupRespond *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroupRespond(struct soap*, const struct happy__InviteGroupRespond *, const char*, const char*);

#ifndef soap_write_happy__InviteGroupRespond
#define soap_write_happy__InviteGroupRespond(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__InviteGroupRespond(soap, data), 0) || soap_put_happy__InviteGroupRespond(soap, data, "happy:InviteGroupRespond", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__InviteGroupRespond * SOAP_FMAC4 soap_get_happy__InviteGroupRespond(struct soap*, struct happy__InviteGroupRespond *, const char*, const char*);

#ifndef soap_read_happy__InviteGroupRespond
#define soap_read_happy__InviteGroupRespond(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__InviteGroupRespond(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__InviteGroupRespond * SOAP_FMAC2 soap_instantiate_happy__InviteGroupRespond(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__InviteGroupRespond * soap_new_happy__InviteGroupRespond(struct soap *soap, int n = -1) { return soap_instantiate_happy__InviteGroupRespond(soap, n, NULL, NULL, NULL); }

inline struct happy__InviteGroupRespond * soap_new_req_happy__InviteGroupRespond(struct soap *soap, const std::wstring& key, const std::wstring& gkey, const std::wstring& content) { struct happy__InviteGroupRespond *_p = soap_instantiate_happy__InviteGroupRespond(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroupRespond(soap, _p); _p->key = key; _p->gkey = gkey; _p->content = content; } return _p; }

inline struct happy__InviteGroupRespond * soap_new_set_happy__InviteGroupRespond(struct soap *soap, const std::wstring& key, const std::wstring& gkey, const std::wstring& content) { struct happy__InviteGroupRespond *_p = soap_instantiate_happy__InviteGroupRespond(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroupRespond(soap, _p); _p->key = key; _p->gkey = gkey; _p->content = content; } return _p; }

inline void soap_delete_happy__InviteGroupRespond(struct soap *soap, struct happy__InviteGroupRespond *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroupRespond(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__InviteGroupRespondResponse
#define SOAP_TYPE_happy__InviteGroupRespondResponse (38)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroupRespondResponse(struct soap*, struct happy__InviteGroupRespondResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroupRespondResponse(struct soap*, const struct happy__InviteGroupRespondResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroupRespondResponse(struct soap*, const char*, int, const struct happy__InviteGroupRespondResponse *, const char*);
SOAP_FMAC3 struct happy__InviteGroupRespondResponse * SOAP_FMAC4 soap_in_happy__InviteGroupRespondResponse(struct soap*, const char*, struct happy__InviteGroupRespondResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroupRespondResponse(struct soap*, const struct happy__InviteGroupRespondResponse *, const char*, const char*);

#ifndef soap_write_happy__InviteGroupRespondResponse
#define soap_write_happy__InviteGroupRespondResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__InviteGroupRespondResponse(soap, data), 0) || soap_put_happy__InviteGroupRespondResponse(soap, data, "happy:InviteGroupRespondResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__InviteGroupRespondResponse * SOAP_FMAC4 soap_get_happy__InviteGroupRespondResponse(struct soap*, struct happy__InviteGroupRespondResponse *, const char*, const char*);

#ifndef soap_read_happy__InviteGroupRespondResponse
#define soap_read_happy__InviteGroupRespondResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__InviteGroupRespondResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__InviteGroupRespondResponse * SOAP_FMAC2 soap_instantiate_happy__InviteGroupRespondResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__InviteGroupRespondResponse * soap_new_happy__InviteGroupRespondResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__InviteGroupRespondResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__InviteGroupRespondResponse * soap_new_req_happy__InviteGroupRespondResponse(struct soap *soap) { struct happy__InviteGroupRespondResponse *_p = soap_instantiate_happy__InviteGroupRespondResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroupRespondResponse(soap, _p); } return _p; }

inline struct happy__InviteGroupRespondResponse * soap_new_set_happy__InviteGroupRespondResponse(struct soap *soap, std::wstring *result) { struct happy__InviteGroupRespondResponse *_p = soap_instantiate_happy__InviteGroupRespondResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroupRespondResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__InviteGroupRespondResponse(struct soap *soap, struct happy__InviteGroupRespondResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroupRespondResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__InviteGroup
#define SOAP_TYPE_happy__InviteGroup (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroup(struct soap*, struct happy__InviteGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroup(struct soap*, const struct happy__InviteGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroup(struct soap*, const char*, int, const struct happy__InviteGroup *, const char*);
SOAP_FMAC3 struct happy__InviteGroup * SOAP_FMAC4 soap_in_happy__InviteGroup(struct soap*, const char*, struct happy__InviteGroup *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroup(struct soap*, const struct happy__InviteGroup *, const char*, const char*);

#ifndef soap_write_happy__InviteGroup
#define soap_write_happy__InviteGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__InviteGroup(soap, data), 0) || soap_put_happy__InviteGroup(soap, data, "happy:InviteGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__InviteGroup * SOAP_FMAC4 soap_get_happy__InviteGroup(struct soap*, struct happy__InviteGroup *, const char*, const char*);

#ifndef soap_read_happy__InviteGroup
#define soap_read_happy__InviteGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__InviteGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__InviteGroup * SOAP_FMAC2 soap_instantiate_happy__InviteGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__InviteGroup * soap_new_happy__InviteGroup(struct soap *soap, int n = -1) { return soap_instantiate_happy__InviteGroup(soap, n, NULL, NULL, NULL); }

inline struct happy__InviteGroup * soap_new_req_happy__InviteGroup(struct soap *soap, const std::wstring& builder, const std::wstring& title, const std::wstring& gkey, const std::wstring& members) { struct happy__InviteGroup *_p = soap_instantiate_happy__InviteGroup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroup(soap, _p); _p->builder = builder; _p->title = title; _p->gkey = gkey; _p->members = members; } return _p; }

inline struct happy__InviteGroup * soap_new_set_happy__InviteGroup(struct soap *soap, const std::wstring& builder, const std::wstring& title, const std::wstring& gkey, const std::wstring& members) { struct happy__InviteGroup *_p = soap_instantiate_happy__InviteGroup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroup(soap, _p); _p->builder = builder; _p->title = title; _p->gkey = gkey; _p->members = members; } return _p; }

inline void soap_delete_happy__InviteGroup(struct soap *soap, struct happy__InviteGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__InviteGroupResponse
#define SOAP_TYPE_happy__InviteGroupResponse (35)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__InviteGroupResponse(struct soap*, struct happy__InviteGroupResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__InviteGroupResponse(struct soap*, const struct happy__InviteGroupResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__InviteGroupResponse(struct soap*, const char*, int, const struct happy__InviteGroupResponse *, const char*);
SOAP_FMAC3 struct happy__InviteGroupResponse * SOAP_FMAC4 soap_in_happy__InviteGroupResponse(struct soap*, const char*, struct happy__InviteGroupResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__InviteGroupResponse(struct soap*, const struct happy__InviteGroupResponse *, const char*, const char*);

#ifndef soap_write_happy__InviteGroupResponse
#define soap_write_happy__InviteGroupResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__InviteGroupResponse(soap, data), 0) || soap_put_happy__InviteGroupResponse(soap, data, "happy:InviteGroupResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__InviteGroupResponse * SOAP_FMAC4 soap_get_happy__InviteGroupResponse(struct soap*, struct happy__InviteGroupResponse *, const char*, const char*);

#ifndef soap_read_happy__InviteGroupResponse
#define soap_read_happy__InviteGroupResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__InviteGroupResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__InviteGroupResponse * SOAP_FMAC2 soap_instantiate_happy__InviteGroupResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__InviteGroupResponse * soap_new_happy__InviteGroupResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__InviteGroupResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__InviteGroupResponse * soap_new_req_happy__InviteGroupResponse(struct soap *soap) { struct happy__InviteGroupResponse *_p = soap_instantiate_happy__InviteGroupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroupResponse(soap, _p); } return _p; }

inline struct happy__InviteGroupResponse * soap_new_set_happy__InviteGroupResponse(struct soap *soap, std::wstring *result) { struct happy__InviteGroupResponse *_p = soap_instantiate_happy__InviteGroupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__InviteGroupResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__InviteGroupResponse(struct soap *soap, struct happy__InviteGroupResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__InviteGroupResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__UpdateHappy
#define SOAP_TYPE_happy__UpdateHappy (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateHappy(struct soap*, struct happy__UpdateHappy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateHappy(struct soap*, const struct happy__UpdateHappy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateHappy(struct soap*, const char*, int, const struct happy__UpdateHappy *, const char*);
SOAP_FMAC3 struct happy__UpdateHappy * SOAP_FMAC4 soap_in_happy__UpdateHappy(struct soap*, const char*, struct happy__UpdateHappy *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateHappy(struct soap*, const struct happy__UpdateHappy *, const char*, const char*);

#ifndef soap_write_happy__UpdateHappy
#define soap_write_happy__UpdateHappy(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__UpdateHappy(soap, data), 0) || soap_put_happy__UpdateHappy(soap, data, "happy:UpdateHappy", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__UpdateHappy * SOAP_FMAC4 soap_get_happy__UpdateHappy(struct soap*, struct happy__UpdateHappy *, const char*, const char*);

#ifndef soap_read_happy__UpdateHappy
#define soap_read_happy__UpdateHappy(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__UpdateHappy(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__UpdateHappy * SOAP_FMAC2 soap_instantiate_happy__UpdateHappy(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__UpdateHappy * soap_new_happy__UpdateHappy(struct soap *soap, int n = -1) { return soap_instantiate_happy__UpdateHappy(soap, n, NULL, NULL, NULL); }

inline struct happy__UpdateHappy * soap_new_req_happy__UpdateHappy(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__UpdateHappy *_p = soap_instantiate_happy__UpdateHappy(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateHappy(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline struct happy__UpdateHappy * soap_new_set_happy__UpdateHappy(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__UpdateHappy *_p = soap_instantiate_happy__UpdateHappy(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateHappy(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline void soap_delete_happy__UpdateHappy(struct soap *soap, struct happy__UpdateHappy *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateHappy(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__UpdateHappyResponse
#define SOAP_TYPE_happy__UpdateHappyResponse (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__UpdateHappyResponse(struct soap*, struct happy__UpdateHappyResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__UpdateHappyResponse(struct soap*, const struct happy__UpdateHappyResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__UpdateHappyResponse(struct soap*, const char*, int, const struct happy__UpdateHappyResponse *, const char*);
SOAP_FMAC3 struct happy__UpdateHappyResponse * SOAP_FMAC4 soap_in_happy__UpdateHappyResponse(struct soap*, const char*, struct happy__UpdateHappyResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__UpdateHappyResponse(struct soap*, const struct happy__UpdateHappyResponse *, const char*, const char*);

#ifndef soap_write_happy__UpdateHappyResponse
#define soap_write_happy__UpdateHappyResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__UpdateHappyResponse(soap, data), 0) || soap_put_happy__UpdateHappyResponse(soap, data, "happy:UpdateHappyResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__UpdateHappyResponse * SOAP_FMAC4 soap_get_happy__UpdateHappyResponse(struct soap*, struct happy__UpdateHappyResponse *, const char*, const char*);

#ifndef soap_read_happy__UpdateHappyResponse
#define soap_read_happy__UpdateHappyResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__UpdateHappyResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__UpdateHappyResponse * SOAP_FMAC2 soap_instantiate_happy__UpdateHappyResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__UpdateHappyResponse * soap_new_happy__UpdateHappyResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__UpdateHappyResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__UpdateHappyResponse * soap_new_req_happy__UpdateHappyResponse(struct soap *soap) { struct happy__UpdateHappyResponse *_p = soap_instantiate_happy__UpdateHappyResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateHappyResponse(soap, _p); } return _p; }

inline struct happy__UpdateHappyResponse * soap_new_set_happy__UpdateHappyResponse(struct soap *soap, std::wstring *result) { struct happy__UpdateHappyResponse *_p = soap_instantiate_happy__UpdateHappyResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__UpdateHappyResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__UpdateHappyResponse(struct soap *soap, struct happy__UpdateHappyResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__UpdateHappyResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__SendFileAccept
#define SOAP_TYPE_happy__SendFileAccept (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileAccept(struct soap*, struct happy__SendFileAccept *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileAccept(struct soap*, const struct happy__SendFileAccept *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileAccept(struct soap*, const char*, int, const struct happy__SendFileAccept *, const char*);
SOAP_FMAC3 struct happy__SendFileAccept * SOAP_FMAC4 soap_in_happy__SendFileAccept(struct soap*, const char*, struct happy__SendFileAccept *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileAccept(struct soap*, const struct happy__SendFileAccept *, const char*, const char*);

#ifndef soap_write_happy__SendFileAccept
#define soap_write_happy__SendFileAccept(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__SendFileAccept(soap, data), 0) || soap_put_happy__SendFileAccept(soap, data, "happy:SendFileAccept", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__SendFileAccept * SOAP_FMAC4 soap_get_happy__SendFileAccept(struct soap*, struct happy__SendFileAccept *, const char*, const char*);

#ifndef soap_read_happy__SendFileAccept
#define soap_read_happy__SendFileAccept(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__SendFileAccept(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__SendFileAccept * SOAP_FMAC2 soap_instantiate_happy__SendFileAccept(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__SendFileAccept * soap_new_happy__SendFileAccept(struct soap *soap, int n = -1) { return soap_instantiate_happy__SendFileAccept(soap, n, NULL, NULL, NULL); }

inline struct happy__SendFileAccept * soap_new_req_happy__SendFileAccept(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__SendFileAccept *_p = soap_instantiate_happy__SendFileAccept(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileAccept(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline struct happy__SendFileAccept * soap_new_set_happy__SendFileAccept(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__SendFileAccept *_p = soap_instantiate_happy__SendFileAccept(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileAccept(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline void soap_delete_happy__SendFileAccept(struct soap *soap, struct happy__SendFileAccept *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileAccept(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__SendFileAcceptResponse
#define SOAP_TYPE_happy__SendFileAcceptResponse (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileAcceptResponse(struct soap*, struct happy__SendFileAcceptResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileAcceptResponse(struct soap*, const struct happy__SendFileAcceptResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileAcceptResponse(struct soap*, const char*, int, const struct happy__SendFileAcceptResponse *, const char*);
SOAP_FMAC3 struct happy__SendFileAcceptResponse * SOAP_FMAC4 soap_in_happy__SendFileAcceptResponse(struct soap*, const char*, struct happy__SendFileAcceptResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileAcceptResponse(struct soap*, const struct happy__SendFileAcceptResponse *, const char*, const char*);

#ifndef soap_write_happy__SendFileAcceptResponse
#define soap_write_happy__SendFileAcceptResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__SendFileAcceptResponse(soap, data), 0) || soap_put_happy__SendFileAcceptResponse(soap, data, "happy:SendFileAcceptResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__SendFileAcceptResponse * SOAP_FMAC4 soap_get_happy__SendFileAcceptResponse(struct soap*, struct happy__SendFileAcceptResponse *, const char*, const char*);

#ifndef soap_read_happy__SendFileAcceptResponse
#define soap_read_happy__SendFileAcceptResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__SendFileAcceptResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__SendFileAcceptResponse * SOAP_FMAC2 soap_instantiate_happy__SendFileAcceptResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__SendFileAcceptResponse * soap_new_happy__SendFileAcceptResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__SendFileAcceptResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__SendFileAcceptResponse * soap_new_req_happy__SendFileAcceptResponse(struct soap *soap) { struct happy__SendFileAcceptResponse *_p = soap_instantiate_happy__SendFileAcceptResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileAcceptResponse(soap, _p); } return _p; }

inline struct happy__SendFileAcceptResponse * soap_new_set_happy__SendFileAcceptResponse(struct soap *soap, std::wstring *result) { struct happy__SendFileAcceptResponse *_p = soap_instantiate_happy__SendFileAcceptResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileAcceptResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__SendFileAcceptResponse(struct soap *soap, struct happy__SendFileAcceptResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileAcceptResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__SendFileExec
#define SOAP_TYPE_happy__SendFileExec (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileExec(struct soap*, struct happy__SendFileExec *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileExec(struct soap*, const struct happy__SendFileExec *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileExec(struct soap*, const char*, int, const struct happy__SendFileExec *, const char*);
SOAP_FMAC3 struct happy__SendFileExec * SOAP_FMAC4 soap_in_happy__SendFileExec(struct soap*, const char*, struct happy__SendFileExec *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileExec(struct soap*, const struct happy__SendFileExec *, const char*, const char*);

#ifndef soap_write_happy__SendFileExec
#define soap_write_happy__SendFileExec(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__SendFileExec(soap, data), 0) || soap_put_happy__SendFileExec(soap, data, "happy:SendFileExec", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__SendFileExec * SOAP_FMAC4 soap_get_happy__SendFileExec(struct soap*, struct happy__SendFileExec *, const char*, const char*);

#ifndef soap_read_happy__SendFileExec
#define soap_read_happy__SendFileExec(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__SendFileExec(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__SendFileExec * SOAP_FMAC2 soap_instantiate_happy__SendFileExec(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__SendFileExec * soap_new_happy__SendFileExec(struct soap *soap, int n = -1) { return soap_instantiate_happy__SendFileExec(soap, n, NULL, NULL, NULL); }

inline struct happy__SendFileExec * soap_new_req_happy__SendFileExec(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__SendFileExec *_p = soap_instantiate_happy__SendFileExec(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileExec(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline struct happy__SendFileExec * soap_new_set_happy__SendFileExec(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__SendFileExec *_p = soap_instantiate_happy__SendFileExec(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileExec(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline void soap_delete_happy__SendFileExec(struct soap *soap, struct happy__SendFileExec *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileExec(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__SendFileExecResponse
#define SOAP_TYPE_happy__SendFileExecResponse (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SendFileExecResponse(struct soap*, struct happy__SendFileExecResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SendFileExecResponse(struct soap*, const struct happy__SendFileExecResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SendFileExecResponse(struct soap*, const char*, int, const struct happy__SendFileExecResponse *, const char*);
SOAP_FMAC3 struct happy__SendFileExecResponse * SOAP_FMAC4 soap_in_happy__SendFileExecResponse(struct soap*, const char*, struct happy__SendFileExecResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SendFileExecResponse(struct soap*, const struct happy__SendFileExecResponse *, const char*, const char*);

#ifndef soap_write_happy__SendFileExecResponse
#define soap_write_happy__SendFileExecResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__SendFileExecResponse(soap, data), 0) || soap_put_happy__SendFileExecResponse(soap, data, "happy:SendFileExecResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__SendFileExecResponse * SOAP_FMAC4 soap_get_happy__SendFileExecResponse(struct soap*, struct happy__SendFileExecResponse *, const char*, const char*);

#ifndef soap_read_happy__SendFileExecResponse
#define soap_read_happy__SendFileExecResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__SendFileExecResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__SendFileExecResponse * SOAP_FMAC2 soap_instantiate_happy__SendFileExecResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__SendFileExecResponse * soap_new_happy__SendFileExecResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__SendFileExecResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__SendFileExecResponse * soap_new_req_happy__SendFileExecResponse(struct soap *soap) { struct happy__SendFileExecResponse *_p = soap_instantiate_happy__SendFileExecResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileExecResponse(soap, _p); } return _p; }

inline struct happy__SendFileExecResponse * soap_new_set_happy__SendFileExecResponse(struct soap *soap, std::wstring *result) { struct happy__SendFileExecResponse *_p = soap_instantiate_happy__SendFileExecResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SendFileExecResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__SendFileExecResponse(struct soap *soap, struct happy__SendFileExecResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SendFileExecResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__ChatGroup
#define SOAP_TYPE_happy__ChatGroup (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatGroup(struct soap*, struct happy__ChatGroup *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatGroup(struct soap*, const struct happy__ChatGroup *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatGroup(struct soap*, const char*, int, const struct happy__ChatGroup *, const char*);
SOAP_FMAC3 struct happy__ChatGroup * SOAP_FMAC4 soap_in_happy__ChatGroup(struct soap*, const char*, struct happy__ChatGroup *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatGroup(struct soap*, const struct happy__ChatGroup *, const char*, const char*);

#ifndef soap_write_happy__ChatGroup
#define soap_write_happy__ChatGroup(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__ChatGroup(soap, data), 0) || soap_put_happy__ChatGroup(soap, data, "happy:ChatGroup", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__ChatGroup * SOAP_FMAC4 soap_get_happy__ChatGroup(struct soap*, struct happy__ChatGroup *, const char*, const char*);

#ifndef soap_read_happy__ChatGroup
#define soap_read_happy__ChatGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__ChatGroup(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__ChatGroup * SOAP_FMAC2 soap_instantiate_happy__ChatGroup(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__ChatGroup * soap_new_happy__ChatGroup(struct soap *soap, int n = -1) { return soap_instantiate_happy__ChatGroup(soap, n, NULL, NULL, NULL); }

inline struct happy__ChatGroup * soap_new_req_happy__ChatGroup(struct soap *soap, const std::wstring& gkey, const std::wstring& key, const std::wstring& content) { struct happy__ChatGroup *_p = soap_instantiate_happy__ChatGroup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatGroup(soap, _p); _p->gkey = gkey; _p->key = key; _p->content = content; } return _p; }

inline struct happy__ChatGroup * soap_new_set_happy__ChatGroup(struct soap *soap, const std::wstring& gkey, const std::wstring& key, const std::wstring& content) { struct happy__ChatGroup *_p = soap_instantiate_happy__ChatGroup(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatGroup(soap, _p); _p->gkey = gkey; _p->key = key; _p->content = content; } return _p; }

inline void soap_delete_happy__ChatGroup(struct soap *soap, struct happy__ChatGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__ChatGroupResponse
#define SOAP_TYPE_happy__ChatGroupResponse (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatGroupResponse(struct soap*, struct happy__ChatGroupResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatGroupResponse(struct soap*, const struct happy__ChatGroupResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatGroupResponse(struct soap*, const char*, int, const struct happy__ChatGroupResponse *, const char*);
SOAP_FMAC3 struct happy__ChatGroupResponse * SOAP_FMAC4 soap_in_happy__ChatGroupResponse(struct soap*, const char*, struct happy__ChatGroupResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatGroupResponse(struct soap*, const struct happy__ChatGroupResponse *, const char*, const char*);

#ifndef soap_write_happy__ChatGroupResponse
#define soap_write_happy__ChatGroupResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__ChatGroupResponse(soap, data), 0) || soap_put_happy__ChatGroupResponse(soap, data, "happy:ChatGroupResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__ChatGroupResponse * SOAP_FMAC4 soap_get_happy__ChatGroupResponse(struct soap*, struct happy__ChatGroupResponse *, const char*, const char*);

#ifndef soap_read_happy__ChatGroupResponse
#define soap_read_happy__ChatGroupResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__ChatGroupResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__ChatGroupResponse * SOAP_FMAC2 soap_instantiate_happy__ChatGroupResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__ChatGroupResponse * soap_new_happy__ChatGroupResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__ChatGroupResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__ChatGroupResponse * soap_new_req_happy__ChatGroupResponse(struct soap *soap) { struct happy__ChatGroupResponse *_p = soap_instantiate_happy__ChatGroupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatGroupResponse(soap, _p); } return _p; }

inline struct happy__ChatGroupResponse * soap_new_set_happy__ChatGroupResponse(struct soap *soap, std::wstring *result) { struct happy__ChatGroupResponse *_p = soap_instantiate_happy__ChatGroupResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatGroupResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__ChatGroupResponse(struct soap *soap, struct happy__ChatGroupResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatGroupResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__SetResource
#define SOAP_TYPE_happy__SetResource (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SetResource(struct soap*, struct happy__SetResource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SetResource(struct soap*, const struct happy__SetResource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SetResource(struct soap*, const char*, int, const struct happy__SetResource *, const char*);
SOAP_FMAC3 struct happy__SetResource * SOAP_FMAC4 soap_in_happy__SetResource(struct soap*, const char*, struct happy__SetResource *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SetResource(struct soap*, const struct happy__SetResource *, const char*, const char*);

#ifndef soap_write_happy__SetResource
#define soap_write_happy__SetResource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__SetResource(soap, data), 0) || soap_put_happy__SetResource(soap, data, "happy:SetResource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__SetResource * SOAP_FMAC4 soap_get_happy__SetResource(struct soap*, struct happy__SetResource *, const char*, const char*);

#ifndef soap_read_happy__SetResource
#define soap_read_happy__SetResource(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__SetResource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__SetResource * SOAP_FMAC2 soap_instantiate_happy__SetResource(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__SetResource * soap_new_happy__SetResource(struct soap *soap, int n = -1) { return soap_instantiate_happy__SetResource(soap, n, NULL, NULL, NULL); }

inline struct happy__SetResource * soap_new_req_happy__SetResource(struct soap *soap, const std::wstring& desuid, const std::wstring& type, const std::wstring& resource, const std::wstring& resname) { struct happy__SetResource *_p = soap_instantiate_happy__SetResource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SetResource(soap, _p); _p->desuid = desuid; _p->type = type; _p->resource = resource; _p->resname = resname; } return _p; }

inline struct happy__SetResource * soap_new_set_happy__SetResource(struct soap *soap, const std::wstring& desuid, const std::wstring& type, const std::wstring& resource, const std::wstring& resname) { struct happy__SetResource *_p = soap_instantiate_happy__SetResource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SetResource(soap, _p); _p->desuid = desuid; _p->type = type; _p->resource = resource; _p->resname = resname; } return _p; }

inline void soap_delete_happy__SetResource(struct soap *soap, struct happy__SetResource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SetResource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__SetResourceResponse
#define SOAP_TYPE_happy__SetResourceResponse (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__SetResourceResponse(struct soap*, struct happy__SetResourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__SetResourceResponse(struct soap*, const struct happy__SetResourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__SetResourceResponse(struct soap*, const char*, int, const struct happy__SetResourceResponse *, const char*);
SOAP_FMAC3 struct happy__SetResourceResponse * SOAP_FMAC4 soap_in_happy__SetResourceResponse(struct soap*, const char*, struct happy__SetResourceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__SetResourceResponse(struct soap*, const struct happy__SetResourceResponse *, const char*, const char*);

#ifndef soap_write_happy__SetResourceResponse
#define soap_write_happy__SetResourceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__SetResourceResponse(soap, data), 0) || soap_put_happy__SetResourceResponse(soap, data, "happy:SetResourceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__SetResourceResponse * SOAP_FMAC4 soap_get_happy__SetResourceResponse(struct soap*, struct happy__SetResourceResponse *, const char*, const char*);

#ifndef soap_read_happy__SetResourceResponse
#define soap_read_happy__SetResourceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__SetResourceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__SetResourceResponse * SOAP_FMAC2 soap_instantiate_happy__SetResourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__SetResourceResponse * soap_new_happy__SetResourceResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__SetResourceResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__SetResourceResponse * soap_new_req_happy__SetResourceResponse(struct soap *soap) { struct happy__SetResourceResponse *_p = soap_instantiate_happy__SetResourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SetResourceResponse(soap, _p); } return _p; }

inline struct happy__SetResourceResponse * soap_new_set_happy__SetResourceResponse(struct soap *soap, int *len) { struct happy__SetResourceResponse *_p = soap_instantiate_happy__SetResourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__SetResourceResponse(soap, _p); _p->len = len; } return _p; }

inline void soap_delete_happy__SetResourceResponse(struct soap *soap, struct happy__SetResourceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__SetResourceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__GetResource
#define SOAP_TYPE_happy__GetResource (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__GetResource(struct soap*, struct happy__GetResource *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__GetResource(struct soap*, const struct happy__GetResource *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__GetResource(struct soap*, const char*, int, const struct happy__GetResource *, const char*);
SOAP_FMAC3 struct happy__GetResource * SOAP_FMAC4 soap_in_happy__GetResource(struct soap*, const char*, struct happy__GetResource *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__GetResource(struct soap*, const struct happy__GetResource *, const char*, const char*);

#ifndef soap_write_happy__GetResource
#define soap_write_happy__GetResource(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__GetResource(soap, data), 0) || soap_put_happy__GetResource(soap, data, "happy:GetResource", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__GetResource * SOAP_FMAC4 soap_get_happy__GetResource(struct soap*, struct happy__GetResource *, const char*, const char*);

#ifndef soap_read_happy__GetResource
#define soap_read_happy__GetResource(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__GetResource(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__GetResource * SOAP_FMAC2 soap_instantiate_happy__GetResource(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__GetResource * soap_new_happy__GetResource(struct soap *soap, int n = -1) { return soap_instantiate_happy__GetResource(soap, n, NULL, NULL, NULL); }

inline struct happy__GetResource * soap_new_req_happy__GetResource(struct soap *soap, const std::wstring& srcuid, const std::wstring& srcuip, const std::wstring& type, const std::wstring& resource) { struct happy__GetResource *_p = soap_instantiate_happy__GetResource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__GetResource(soap, _p); _p->srcuid = srcuid; _p->srcuip = srcuip; _p->type = type; _p->resource = resource; } return _p; }

inline struct happy__GetResource * soap_new_set_happy__GetResource(struct soap *soap, const std::wstring& srcuid, const std::wstring& srcuip, const std::wstring& type, const std::wstring& resource) { struct happy__GetResource *_p = soap_instantiate_happy__GetResource(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__GetResource(soap, _p); _p->srcuid = srcuid; _p->srcuip = srcuip; _p->type = type; _p->resource = resource; } return _p; }

inline void soap_delete_happy__GetResource(struct soap *soap, struct happy__GetResource *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__GetResource(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__GetResourceResponse
#define SOAP_TYPE_happy__GetResourceResponse (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__GetResourceResponse(struct soap*, struct happy__GetResourceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__GetResourceResponse(struct soap*, const struct happy__GetResourceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__GetResourceResponse(struct soap*, const char*, int, const struct happy__GetResourceResponse *, const char*);
SOAP_FMAC3 struct happy__GetResourceResponse * SOAP_FMAC4 soap_in_happy__GetResourceResponse(struct soap*, const char*, struct happy__GetResourceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__GetResourceResponse(struct soap*, const struct happy__GetResourceResponse *, const char*, const char*);

#ifndef soap_write_happy__GetResourceResponse
#define soap_write_happy__GetResourceResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__GetResourceResponse(soap, data), 0) || soap_put_happy__GetResourceResponse(soap, data, "happy:GetResourceResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__GetResourceResponse * SOAP_FMAC4 soap_get_happy__GetResourceResponse(struct soap*, struct happy__GetResourceResponse *, const char*, const char*);

#ifndef soap_read_happy__GetResourceResponse
#define soap_read_happy__GetResourceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__GetResourceResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__GetResourceResponse * SOAP_FMAC2 soap_instantiate_happy__GetResourceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__GetResourceResponse * soap_new_happy__GetResourceResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__GetResourceResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__GetResourceResponse * soap_new_req_happy__GetResourceResponse(struct soap *soap) { struct happy__GetResourceResponse *_p = soap_instantiate_happy__GetResourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__GetResourceResponse(soap, _p); } return _p; }

inline struct happy__GetResourceResponse * soap_new_set_happy__GetResourceResponse(struct soap *soap, int *len) { struct happy__GetResourceResponse *_p = soap_instantiate_happy__GetResourceResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__GetResourceResponse(soap, _p); _p->len = len; } return _p; }

inline void soap_delete_happy__GetResourceResponse(struct soap *soap, struct happy__GetResourceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__GetResourceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__ChatShake
#define SOAP_TYPE_happy__ChatShake (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatShake(struct soap*, struct happy__ChatShake *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatShake(struct soap*, const struct happy__ChatShake *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatShake(struct soap*, const char*, int, const struct happy__ChatShake *, const char*);
SOAP_FMAC3 struct happy__ChatShake * SOAP_FMAC4 soap_in_happy__ChatShake(struct soap*, const char*, struct happy__ChatShake *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatShake(struct soap*, const struct happy__ChatShake *, const char*, const char*);

#ifndef soap_write_happy__ChatShake
#define soap_write_happy__ChatShake(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__ChatShake(soap, data), 0) || soap_put_happy__ChatShake(soap, data, "happy:ChatShake", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__ChatShake * SOAP_FMAC4 soap_get_happy__ChatShake(struct soap*, struct happy__ChatShake *, const char*, const char*);

#ifndef soap_read_happy__ChatShake
#define soap_read_happy__ChatShake(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__ChatShake(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__ChatShake * SOAP_FMAC2 soap_instantiate_happy__ChatShake(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__ChatShake * soap_new_happy__ChatShake(struct soap *soap, int n = -1) { return soap_instantiate_happy__ChatShake(soap, n, NULL, NULL, NULL); }

inline struct happy__ChatShake * soap_new_req_happy__ChatShake(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__ChatShake *_p = soap_instantiate_happy__ChatShake(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatShake(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline struct happy__ChatShake * soap_new_set_happy__ChatShake(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__ChatShake *_p = soap_instantiate_happy__ChatShake(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatShake(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline void soap_delete_happy__ChatShake(struct soap *soap, struct happy__ChatShake *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatShake(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__ChatShakeResponse
#define SOAP_TYPE_happy__ChatShakeResponse (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatShakeResponse(struct soap*, struct happy__ChatShakeResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatShakeResponse(struct soap*, const struct happy__ChatShakeResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatShakeResponse(struct soap*, const char*, int, const struct happy__ChatShakeResponse *, const char*);
SOAP_FMAC3 struct happy__ChatShakeResponse * SOAP_FMAC4 soap_in_happy__ChatShakeResponse(struct soap*, const char*, struct happy__ChatShakeResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatShakeResponse(struct soap*, const struct happy__ChatShakeResponse *, const char*, const char*);

#ifndef soap_write_happy__ChatShakeResponse
#define soap_write_happy__ChatShakeResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__ChatShakeResponse(soap, data), 0) || soap_put_happy__ChatShakeResponse(soap, data, "happy:ChatShakeResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__ChatShakeResponse * SOAP_FMAC4 soap_get_happy__ChatShakeResponse(struct soap*, struct happy__ChatShakeResponse *, const char*, const char*);

#ifndef soap_read_happy__ChatShakeResponse
#define soap_read_happy__ChatShakeResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__ChatShakeResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__ChatShakeResponse * SOAP_FMAC2 soap_instantiate_happy__ChatShakeResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__ChatShakeResponse * soap_new_happy__ChatShakeResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__ChatShakeResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__ChatShakeResponse * soap_new_req_happy__ChatShakeResponse(struct soap *soap) { struct happy__ChatShakeResponse *_p = soap_instantiate_happy__ChatShakeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatShakeResponse(soap, _p); } return _p; }

inline struct happy__ChatShakeResponse * soap_new_set_happy__ChatShakeResponse(struct soap *soap, std::wstring *result) { struct happy__ChatShakeResponse *_p = soap_instantiate_happy__ChatShakeResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatShakeResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__ChatShakeResponse(struct soap *soap, struct happy__ChatShakeResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatShakeResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__ChatOneByOne
#define SOAP_TYPE_happy__ChatOneByOne (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatOneByOne(struct soap*, struct happy__ChatOneByOne *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatOneByOne(struct soap*, const struct happy__ChatOneByOne *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatOneByOne(struct soap*, const char*, int, const struct happy__ChatOneByOne *, const char*);
SOAP_FMAC3 struct happy__ChatOneByOne * SOAP_FMAC4 soap_in_happy__ChatOneByOne(struct soap*, const char*, struct happy__ChatOneByOne *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatOneByOne(struct soap*, const struct happy__ChatOneByOne *, const char*, const char*);

#ifndef soap_write_happy__ChatOneByOne
#define soap_write_happy__ChatOneByOne(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__ChatOneByOne(soap, data), 0) || soap_put_happy__ChatOneByOne(soap, data, "happy:ChatOneByOne", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__ChatOneByOne * SOAP_FMAC4 soap_get_happy__ChatOneByOne(struct soap*, struct happy__ChatOneByOne *, const char*, const char*);

#ifndef soap_read_happy__ChatOneByOne
#define soap_read_happy__ChatOneByOne(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__ChatOneByOne(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__ChatOneByOne * SOAP_FMAC2 soap_instantiate_happy__ChatOneByOne(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__ChatOneByOne * soap_new_happy__ChatOneByOne(struct soap *soap, int n = -1) { return soap_instantiate_happy__ChatOneByOne(soap, n, NULL, NULL, NULL); }

inline struct happy__ChatOneByOne * soap_new_req_happy__ChatOneByOne(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__ChatOneByOne *_p = soap_instantiate_happy__ChatOneByOne(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatOneByOne(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline struct happy__ChatOneByOne * soap_new_set_happy__ChatOneByOne(struct soap *soap, const std::wstring& key, const std::wstring& content) { struct happy__ChatOneByOne *_p = soap_instantiate_happy__ChatOneByOne(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatOneByOne(soap, _p); _p->key = key; _p->content = content; } return _p; }

inline void soap_delete_happy__ChatOneByOne(struct soap *soap, struct happy__ChatOneByOne *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatOneByOne(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_happy__ChatOneByOneResponse
#define SOAP_TYPE_happy__ChatOneByOneResponse (10)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_happy__ChatOneByOneResponse(struct soap*, struct happy__ChatOneByOneResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_happy__ChatOneByOneResponse(struct soap*, const struct happy__ChatOneByOneResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_happy__ChatOneByOneResponse(struct soap*, const char*, int, const struct happy__ChatOneByOneResponse *, const char*);
SOAP_FMAC3 struct happy__ChatOneByOneResponse * SOAP_FMAC4 soap_in_happy__ChatOneByOneResponse(struct soap*, const char*, struct happy__ChatOneByOneResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_happy__ChatOneByOneResponse(struct soap*, const struct happy__ChatOneByOneResponse *, const char*, const char*);

#ifndef soap_write_happy__ChatOneByOneResponse
#define soap_write_happy__ChatOneByOneResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_happy__ChatOneByOneResponse(soap, data), 0) || soap_put_happy__ChatOneByOneResponse(soap, data, "happy:ChatOneByOneResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct happy__ChatOneByOneResponse * SOAP_FMAC4 soap_get_happy__ChatOneByOneResponse(struct soap*, struct happy__ChatOneByOneResponse *, const char*, const char*);

#ifndef soap_read_happy__ChatOneByOneResponse
#define soap_read_happy__ChatOneByOneResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_happy__ChatOneByOneResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct happy__ChatOneByOneResponse * SOAP_FMAC2 soap_instantiate_happy__ChatOneByOneResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct happy__ChatOneByOneResponse * soap_new_happy__ChatOneByOneResponse(struct soap *soap, int n = -1) { return soap_instantiate_happy__ChatOneByOneResponse(soap, n, NULL, NULL, NULL); }

inline struct happy__ChatOneByOneResponse * soap_new_req_happy__ChatOneByOneResponse(struct soap *soap) { struct happy__ChatOneByOneResponse *_p = soap_instantiate_happy__ChatOneByOneResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatOneByOneResponse(soap, _p); } return _p; }

inline struct happy__ChatOneByOneResponse * soap_new_set_happy__ChatOneByOneResponse(struct soap *soap, std::wstring *result) { struct happy__ChatOneByOneResponse *_p = soap_instantiate_happy__ChatOneByOneResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_happy__ChatOneByOneResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_happy__ChatOneByOneResponse(struct soap *soap, struct happy__ChatOneByOneResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_happy__ChatOneByOneResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data), 0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data), 0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data), 0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerToint
#define SOAP_TYPE_PointerToint (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToint(soap, data), 0) || soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__wstring
#define SOAP_TYPE_PointerTostd__wstring (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap*, std::wstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap*, const char *, int, std::wstring *const*, const char *);
SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap*, const char*, std::wstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap*, std::wstring *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__wstring
#define soap_write_PointerTostd__wstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__wstring(soap, data), 0) || soap_put_PointerTostd__wstring(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap*, std::wstring **, const char*, const char*);

#ifndef soap_read_PointerTostd__wstring
#define soap_read_PointerTostd__wstring(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__wstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data), 0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data), 0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

/* End of soapH.h */
