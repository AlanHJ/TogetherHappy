/* soapProxy.cpp
   Generated by gSOAP 2.8.23 from happyservice.h

Copyright(C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapProxy.h"

Proxy::Proxy() : soap(SOAP_IO_DEFAULT)
{	Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

Proxy::Proxy(const struct soap &_soap) : soap(_soap)
{ }

Proxy::Proxy(const char *url) : soap(SOAP_IO_DEFAULT)
{	Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

Proxy::Proxy(soap_mode iomode) : soap(iomode)
{	Proxy_init(iomode, iomode);
}

Proxy::Proxy(const char *url, soap_mode iomode) : soap(iomode)
{	Proxy_init(iomode, iomode);
	soap_endpoint = url;
}

Proxy::Proxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	Proxy_init(imode, omode);
}

Proxy::~Proxy()
{
	this->destroy();
	}

void Proxy::Proxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"happy", "http://tempuri.org/happy.xsd", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void Proxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void Proxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	Proxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void Proxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *Proxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *Proxy::soap_fault()
{	return this->fault;
}

const char *Proxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *Proxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int Proxy::soap_close_socket()
{	return soap_closesock(this);
}

int Proxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void Proxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void Proxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *Proxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int Proxy::ChatOneByOne(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__ChatOneByOne soap_tmp_happy__ChatOneByOne;
	struct happy__ChatOneByOneResponse *soap_tmp_happy__ChatOneByOneResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__ChatOneByOne.key = key;
	soap_tmp_happy__ChatOneByOne.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__ChatOneByOne(soap, &soap_tmp_happy__ChatOneByOne);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__ChatOneByOne(soap, &soap_tmp_happy__ChatOneByOne, "happy:ChatOneByOne", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__ChatOneByOne(soap, &soap_tmp_happy__ChatOneByOne, "happy:ChatOneByOne", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__ChatOneByOneResponse = soap_get_happy__ChatOneByOneResponse(soap, NULL, "happy:ChatOneByOneResponse", NULL);
	if (!soap_tmp_happy__ChatOneByOneResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__ChatOneByOneResponse->result)
		*result = *soap_tmp_happy__ChatOneByOneResponse->result;
	return soap_closesock(soap);
}

int Proxy::ChatShake(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__ChatShake soap_tmp_happy__ChatShake;
	struct happy__ChatShakeResponse *soap_tmp_happy__ChatShakeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__ChatShake.key = key;
	soap_tmp_happy__ChatShake.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__ChatShake(soap, &soap_tmp_happy__ChatShake);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__ChatShake(soap, &soap_tmp_happy__ChatShake, "happy:ChatShake", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__ChatShake(soap, &soap_tmp_happy__ChatShake, "happy:ChatShake", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__ChatShakeResponse = soap_get_happy__ChatShakeResponse(soap, NULL, "happy:ChatShakeResponse", NULL);
	if (!soap_tmp_happy__ChatShakeResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__ChatShakeResponse->result)
		*result = *soap_tmp_happy__ChatShakeResponse->result;
	return soap_closesock(soap);
}

int Proxy::GetResource(const char *endpoint, const char *soap_action, std::wstring srcuid, std::wstring srcuip, std::wstring type, std::wstring resource, int *len)
{	struct soap *soap = this;
	struct happy__GetResource soap_tmp_happy__GetResource;
	struct happy__GetResourceResponse *soap_tmp_happy__GetResourceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__GetResource.srcuid = srcuid;
	soap_tmp_happy__GetResource.srcuip = srcuip;
	soap_tmp_happy__GetResource.type = type;
	soap_tmp_happy__GetResource.resource = resource;
	soap_serializeheader(soap);
	soap_serialize_happy__GetResource(soap, &soap_tmp_happy__GetResource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__GetResource(soap, &soap_tmp_happy__GetResource, "happy:GetResource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__GetResource(soap, &soap_tmp_happy__GetResource, "happy:GetResource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!len)
		return soap_closesock(soap);
	soap_default_int(soap, len);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__GetResourceResponse = soap_get_happy__GetResourceResponse(soap, NULL, "happy:GetResourceResponse", NULL);
	if (!soap_tmp_happy__GetResourceResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (len && soap_tmp_happy__GetResourceResponse->len)
		*len = *soap_tmp_happy__GetResourceResponse->len;
	return soap_closesock(soap);
}

int Proxy::SetResource(const char *endpoint, const char *soap_action, std::wstring desuid, std::wstring type, std::wstring resource, std::wstring resname, int *len)
{	struct soap *soap = this;
	struct happy__SetResource soap_tmp_happy__SetResource;
	struct happy__SetResourceResponse *soap_tmp_happy__SetResourceResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__SetResource.desuid = desuid;
	soap_tmp_happy__SetResource.type = type;
	soap_tmp_happy__SetResource.resource = resource;
	soap_tmp_happy__SetResource.resname = resname;
	soap_serializeheader(soap);
	soap_serialize_happy__SetResource(soap, &soap_tmp_happy__SetResource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__SetResource(soap, &soap_tmp_happy__SetResource, "happy:SetResource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__SetResource(soap, &soap_tmp_happy__SetResource, "happy:SetResource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!len)
		return soap_closesock(soap);
	soap_default_int(soap, len);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__SetResourceResponse = soap_get_happy__SetResourceResponse(soap, NULL, "happy:SetResourceResponse", NULL);
	if (!soap_tmp_happy__SetResourceResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (len && soap_tmp_happy__SetResourceResponse->len)
		*len = *soap_tmp_happy__SetResourceResponse->len;
	return soap_closesock(soap);
}

int Proxy::ChatGroup(const char *endpoint, const char *soap_action, std::wstring gkey, std::wstring key, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__ChatGroup soap_tmp_happy__ChatGroup;
	struct happy__ChatGroupResponse *soap_tmp_happy__ChatGroupResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__ChatGroup.gkey = gkey;
	soap_tmp_happy__ChatGroup.key = key;
	soap_tmp_happy__ChatGroup.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__ChatGroup(soap, &soap_tmp_happy__ChatGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__ChatGroup(soap, &soap_tmp_happy__ChatGroup, "happy:ChatGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__ChatGroup(soap, &soap_tmp_happy__ChatGroup, "happy:ChatGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__ChatGroupResponse = soap_get_happy__ChatGroupResponse(soap, NULL, "happy:ChatGroupResponse", NULL);
	if (!soap_tmp_happy__ChatGroupResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__ChatGroupResponse->result)
		*result = *soap_tmp_happy__ChatGroupResponse->result;
	return soap_closesock(soap);
}

int Proxy::SendFileExec(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__SendFileExec soap_tmp_happy__SendFileExec;
	struct happy__SendFileExecResponse *soap_tmp_happy__SendFileExecResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__SendFileExec.key = key;
	soap_tmp_happy__SendFileExec.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__SendFileExec(soap, &soap_tmp_happy__SendFileExec);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__SendFileExec(soap, &soap_tmp_happy__SendFileExec, "happy:SendFileExec", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__SendFileExec(soap, &soap_tmp_happy__SendFileExec, "happy:SendFileExec", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__SendFileExecResponse = soap_get_happy__SendFileExecResponse(soap, NULL, "happy:SendFileExecResponse", NULL);
	if (!soap_tmp_happy__SendFileExecResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__SendFileExecResponse->result)
		*result = *soap_tmp_happy__SendFileExecResponse->result;
	return soap_closesock(soap);
}

int Proxy::SendFileAccept(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__SendFileAccept soap_tmp_happy__SendFileAccept;
	struct happy__SendFileAcceptResponse *soap_tmp_happy__SendFileAcceptResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__SendFileAccept.key = key;
	soap_tmp_happy__SendFileAccept.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__SendFileAccept(soap, &soap_tmp_happy__SendFileAccept);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__SendFileAccept(soap, &soap_tmp_happy__SendFileAccept, "happy:SendFileAccept", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__SendFileAccept(soap, &soap_tmp_happy__SendFileAccept, "happy:SendFileAccept", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__SendFileAcceptResponse = soap_get_happy__SendFileAcceptResponse(soap, NULL, "happy:SendFileAcceptResponse", NULL);
	if (!soap_tmp_happy__SendFileAcceptResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__SendFileAcceptResponse->result)
		*result = *soap_tmp_happy__SendFileAcceptResponse->result;
	return soap_closesock(soap);
}

int Proxy::UpdateHappy(const char *endpoint, const char *soap_action, std::wstring key, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__UpdateHappy soap_tmp_happy__UpdateHappy;
	struct happy__UpdateHappyResponse *soap_tmp_happy__UpdateHappyResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__UpdateHappy.key = key;
	soap_tmp_happy__UpdateHappy.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__UpdateHappy(soap, &soap_tmp_happy__UpdateHappy);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__UpdateHappy(soap, &soap_tmp_happy__UpdateHappy, "happy:UpdateHappy", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__UpdateHappy(soap, &soap_tmp_happy__UpdateHappy, "happy:UpdateHappy", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__UpdateHappyResponse = soap_get_happy__UpdateHappyResponse(soap, NULL, "happy:UpdateHappyResponse", NULL);
	if (!soap_tmp_happy__UpdateHappyResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__UpdateHappyResponse->result)
		*result = *soap_tmp_happy__UpdateHappyResponse->result;
	return soap_closesock(soap);
}

int Proxy::InviteGroup(const char *endpoint, const char *soap_action, std::wstring builder, std::wstring title, std::wstring gkey, std::wstring members, std::wstring *result)
{	struct soap *soap = this;
	struct happy__InviteGroup soap_tmp_happy__InviteGroup;
	struct happy__InviteGroupResponse *soap_tmp_happy__InviteGroupResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__InviteGroup.builder = builder;
	soap_tmp_happy__InviteGroup.title = title;
	soap_tmp_happy__InviteGroup.gkey = gkey;
	soap_tmp_happy__InviteGroup.members = members;
	soap_serializeheader(soap);
	soap_serialize_happy__InviteGroup(soap, &soap_tmp_happy__InviteGroup);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__InviteGroup(soap, &soap_tmp_happy__InviteGroup, "happy:InviteGroup", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__InviteGroup(soap, &soap_tmp_happy__InviteGroup, "happy:InviteGroup", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__InviteGroupResponse = soap_get_happy__InviteGroupResponse(soap, NULL, "happy:InviteGroupResponse", NULL);
	if (!soap_tmp_happy__InviteGroupResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__InviteGroupResponse->result)
		*result = *soap_tmp_happy__InviteGroupResponse->result;
	return soap_closesock(soap);
}

int Proxy::InviteGroupRespond(const char *endpoint, const char *soap_action, std::wstring key, std::wstring gkey, std::wstring content, std::wstring *result)
{	struct soap *soap = this;
	struct happy__InviteGroupRespond soap_tmp_happy__InviteGroupRespond;
	struct happy__InviteGroupRespondResponse *soap_tmp_happy__InviteGroupRespondResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__InviteGroupRespond.key = key;
	soap_tmp_happy__InviteGroupRespond.gkey = gkey;
	soap_tmp_happy__InviteGroupRespond.content = content;
	soap_serializeheader(soap);
	soap_serialize_happy__InviteGroupRespond(soap, &soap_tmp_happy__InviteGroupRespond);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__InviteGroupRespond(soap, &soap_tmp_happy__InviteGroupRespond, "happy:InviteGroupRespond", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__InviteGroupRespond(soap, &soap_tmp_happy__InviteGroupRespond, "happy:InviteGroupRespond", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__InviteGroupRespondResponse = soap_get_happy__InviteGroupRespondResponse(soap, NULL, "happy:InviteGroupRespondResponse", NULL);
	if (!soap_tmp_happy__InviteGroupRespondResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__InviteGroupRespondResponse->result)
		*result = *soap_tmp_happy__InviteGroupRespondResponse->result;
	return soap_closesock(soap);
}

int Proxy::UpdateGroupUser(const char *endpoint, const char *soap_action, std::wstring gkey, std::wstring newusers, std::wstring *result)
{	struct soap *soap = this;
	struct happy__UpdateGroupUser soap_tmp_happy__UpdateGroupUser;
	struct happy__UpdateGroupUserResponse *soap_tmp_happy__UpdateGroupUserResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_happy__UpdateGroupUser.gkey = gkey;
	soap_tmp_happy__UpdateGroupUser.newusers = newusers;
	soap_serializeheader(soap);
	soap_serialize_happy__UpdateGroupUser(soap, &soap_tmp_happy__UpdateGroupUser);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_happy__UpdateGroupUser(soap, &soap_tmp_happy__UpdateGroupUser, "happy:UpdateGroupUser", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_happy__UpdateGroupUser(soap, &soap_tmp_happy__UpdateGroupUser, "happy:UpdateGroupUser", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_std__wstring(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_happy__UpdateGroupUserResponse = soap_get_happy__UpdateGroupUserResponse(soap, NULL, "happy:UpdateGroupUserResponse", NULL);
	if (!soap_tmp_happy__UpdateGroupUserResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_happy__UpdateGroupUserResponse->result)
		*result = *soap_tmp_happy__UpdateGroupUserResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
